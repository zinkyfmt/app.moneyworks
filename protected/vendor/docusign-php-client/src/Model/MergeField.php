<?php
/**
 * MergeField
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * MergeField Class Doc Comment
 *
 * @category    Class
 * @description Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MergeField implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'configuration_type' => 'string',
        'path' => 'string',
        'write_back' => 'string',
        'allow_sender_to_edit' => 'string',
        'row' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'configuration_type' => 'configurationType',
        'path' => 'path',
        'write_back' => 'writeBack',
        'allow_sender_to_edit' => 'allowSenderToEdit',
        'row' => 'row'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'configuration_type' => 'setConfigurationType',
        'path' => 'setPath',
        'write_back' => 'setWriteBack',
        'allow_sender_to_edit' => 'setAllowSenderToEdit',
        'row' => 'setRow'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'configuration_type' => 'getConfigurationType',
        'path' => 'getPath',
        'write_back' => 'getWriteBack',
        'allow_sender_to_edit' => 'getAllowSenderToEdit',
        'row' => 'getRow'
    );
  
    
    /**
      * $configuration_type If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
      * @var string
      */
    protected $configuration_type;
    
    /**
      * $path Sets the object associated with the custom tab. Currently this is the Salesforce Object.
      * @var string
      */
    protected $path;
    
    /**
      * $write_back When wet to true, the information entered in the tab automatically updates the related Salesforce data when an envelope is completed.
      * @var string
      */
    protected $write_back;
    
    /**
      * $allow_sender_to_edit When set to **true**, the sender can modify the value of the custom tab during the sending process.
      * @var string
      */
    protected $allow_sender_to_edit;
    
    /**
      * $row Specifies the row number in a Salesforce table that the merge field value corresponds to.
      * @var string
      */
    protected $row;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->configuration_type = $data["configuration_type"];
            $this->path = $data["path"];
            $this->write_back = $data["write_back"];
            $this->allow_sender_to_edit = $data["allow_sender_to_edit"];
            $this->row = $data["row"];
        }
    }
    
    /**
     * Gets configuration_type
     * @return string
     */
    public function getConfigurationType()
    {
        return $this->configuration_type;
    }
  
    /**
     * Sets configuration_type
     * @param string $configuration_type If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
     * @return $this
     */
    public function setConfigurationType($configuration_type)
    {
        
        $this->configuration_type = $configuration_type;
        return $this;
    }
    
    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }
  
    /**
     * Sets path
     * @param string $path Sets the object associated with the custom tab. Currently this is the Salesforce Object.
     * @return $this
     */
    public function setPath($path)
    {
        
        $this->path = $path;
        return $this;
    }
    
    /**
     * Gets write_back
     * @return string
     */
    public function getWriteBack()
    {
        return $this->write_back;
    }
  
    /**
     * Sets write_back
     * @param string $write_back When wet to true, the information entered in the tab automatically updates the related Salesforce data when an envelope is completed.
     * @return $this
     */
    public function setWriteBack($write_back)
    {
        
        $this->write_back = $write_back;
        return $this;
    }
    
    /**
     * Gets allow_sender_to_edit
     * @return string
     */
    public function getAllowSenderToEdit()
    {
        return $this->allow_sender_to_edit;
    }
  
    /**
     * Sets allow_sender_to_edit
     * @param string $allow_sender_to_edit When set to **true**, the sender can modify the value of the custom tab during the sending process.
     * @return $this
     */
    public function setAllowSenderToEdit($allow_sender_to_edit)
    {
        
        $this->allow_sender_to_edit = $allow_sender_to_edit;
        return $this;
    }
    
    /**
     * Gets row
     * @return string
     */
    public function getRow()
    {
        return $this->row;
    }
  
    /**
     * Sets row
     * @param string $row Specifies the row number in a Salesforce table that the merge field value corresponds to.
     * @return $this
     */
    public function setRow($row)
    {
        
        $this->row = $row;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
