<?php
/**
 * CompositeTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * CompositeTemplate Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompositeTemplate implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'composite_template_id' => 'string',
        'server_templates' => '\DocuSign\eSign\Model\ServerTemplate[]',
        'inline_templates' => '\DocuSign\eSign\Model\InlineTemplate[]',
        'pdf_meta_data_template_sequence' => 'string',
        'document' => '\DocuSign\eSign\Model\Document'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'composite_template_id' => 'compositeTemplateId',
        'server_templates' => 'serverTemplates',
        'inline_templates' => 'inlineTemplates',
        'pdf_meta_data_template_sequence' => 'pdfMetaDataTemplateSequence',
        'document' => 'document'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'composite_template_id' => 'setCompositeTemplateId',
        'server_templates' => 'setServerTemplates',
        'inline_templates' => 'setInlineTemplates',
        'pdf_meta_data_template_sequence' => 'setPdfMetaDataTemplateSequence',
        'document' => 'setDocument'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'composite_template_id' => 'getCompositeTemplateId',
        'server_templates' => 'getServerTemplates',
        'inline_templates' => 'getInlineTemplates',
        'pdf_meta_data_template_sequence' => 'getPdfMetaDataTemplateSequence',
        'document' => 'getDocument'
    );
  
    
    /**
      * $composite_template_id Specifies the identify the composite template. It is used as a reference when adding document object information. If used, the document content-disposition must include the composite template ID to which the document should be added. If composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.
      * @var string
      */
    protected $composite_template_id;
    
    /**
      * $server_templates 0 or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
      * @var \DocuSign\eSign\Model\ServerTemplate[]
      */
    protected $server_templates;
    
    /**
      * $inline_templates Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value.
      * @var \DocuSign\eSign\Model\InlineTemplate[]
      */
    protected $inline_templates;
    
    /**
      * $pdf_meta_data_template_sequence 
      * @var string
      */
    protected $pdf_meta_data_template_sequence;
    
    /**
      * $document 
      * @var \DocuSign\eSign\Model\Document
      */
    protected $document;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->composite_template_id = $data["composite_template_id"];
            $this->server_templates = $data["server_templates"];
            $this->inline_templates = $data["inline_templates"];
            $this->pdf_meta_data_template_sequence = $data["pdf_meta_data_template_sequence"];
            $this->document = $data["document"];
        }
    }
    
    /**
     * Gets composite_template_id
     * @return string
     */
    public function getCompositeTemplateId()
    {
        return $this->composite_template_id;
    }
  
    /**
     * Sets composite_template_id
     * @param string $composite_template_id Specifies the identify the composite template. It is used as a reference when adding document object information. If used, the document content-disposition must include the composite template ID to which the document should be added. If composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.
     * @return $this
     */
    public function setCompositeTemplateId($composite_template_id)
    {
        
        $this->composite_template_id = $composite_template_id;
        return $this;
    }
    
    /**
     * Gets server_templates
     * @return \DocuSign\eSign\Model\ServerTemplate[]
     */
    public function getServerTemplates()
    {
        return $this->server_templates;
    }
  
    /**
     * Sets server_templates
     * @param \DocuSign\eSign\Model\ServerTemplate[] $server_templates 0 or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
     * @return $this
     */
    public function setServerTemplates($server_templates)
    {
        
        $this->server_templates = $server_templates;
        return $this;
    }
    
    /**
     * Gets inline_templates
     * @return \DocuSign\eSign\Model\InlineTemplate[]
     */
    public function getInlineTemplates()
    {
        return $this->inline_templates;
    }
  
    /**
     * Sets inline_templates
     * @param \DocuSign\eSign\Model\InlineTemplate[] $inline_templates Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value.
     * @return $this
     */
    public function setInlineTemplates($inline_templates)
    {
        
        $this->inline_templates = $inline_templates;
        return $this;
    }
    
    /**
     * Gets pdf_meta_data_template_sequence
     * @return string
     */
    public function getPdfMetaDataTemplateSequence()
    {
        return $this->pdf_meta_data_template_sequence;
    }
  
    /**
     * Sets pdf_meta_data_template_sequence
     * @param string $pdf_meta_data_template_sequence 
     * @return $this
     */
    public function setPdfMetaDataTemplateSequence($pdf_meta_data_template_sequence)
    {
        
        $this->pdf_meta_data_template_sequence = $pdf_meta_data_template_sequence;
        return $this;
    }
    
    /**
     * Gets document
     * @return \DocuSign\eSign\Model\Document
     */
    public function getDocument()
    {
        return $this->document;
    }
  
    /**
     * Sets document
     * @param \DocuSign\eSign\Model\Document $document 
     * @return $this
     */
    public function setDocument($document)
    {
        
        $this->document = $document;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
