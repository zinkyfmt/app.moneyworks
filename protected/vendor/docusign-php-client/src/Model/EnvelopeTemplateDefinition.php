<?php
/**
 * EnvelopeTemplateDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * EnvelopeTemplateDefinition Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EnvelopeTemplateDefinition implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'template_id' => 'string',
        'name' => 'string',
        'shared' => 'string',
        'password' => 'string',
        'new_password' => 'string',
        'description' => 'string',
        'last_modified' => 'string',
        'last_modified_by' => '\DocuSign\eSign\Model\UserInfo',
        'page_count' => 'int',
        'uri' => 'string',
        'folder_name' => 'string',
        'folder_id' => 'string',
        'folder_uri' => 'string',
        'parent_folder_uri' => 'string',
        'owner' => '\DocuSign\eSign\Model\UserInfo'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'template_id' => 'templateId',
        'name' => 'name',
        'shared' => 'shared',
        'password' => 'password',
        'new_password' => 'newPassword',
        'description' => 'description',
        'last_modified' => 'lastModified',
        'last_modified_by' => 'lastModifiedBy',
        'page_count' => 'pageCount',
        'uri' => 'uri',
        'folder_name' => 'folderName',
        'folder_id' => 'folderId',
        'folder_uri' => 'folderUri',
        'parent_folder_uri' => 'parentFolderUri',
        'owner' => 'owner'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'template_id' => 'setTemplateId',
        'name' => 'setName',
        'shared' => 'setShared',
        'password' => 'setPassword',
        'new_password' => 'setNewPassword',
        'description' => 'setDescription',
        'last_modified' => 'setLastModified',
        'last_modified_by' => 'setLastModifiedBy',
        'page_count' => 'setPageCount',
        'uri' => 'setUri',
        'folder_name' => 'setFolderName',
        'folder_id' => 'setFolderId',
        'folder_uri' => 'setFolderUri',
        'parent_folder_uri' => 'setParentFolderUri',
        'owner' => 'setOwner'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'template_id' => 'getTemplateId',
        'name' => 'getName',
        'shared' => 'getShared',
        'password' => 'getPassword',
        'new_password' => 'getNewPassword',
        'description' => 'getDescription',
        'last_modified' => 'getLastModified',
        'last_modified_by' => 'getLastModifiedBy',
        'page_count' => 'getPageCount',
        'uri' => 'getUri',
        'folder_name' => 'getFolderName',
        'folder_id' => 'getFolderId',
        'folder_uri' => 'getFolderUri',
        'parent_folder_uri' => 'getParentFolderUri',
        'owner' => 'getOwner'
    );
  
    
    /**
      * $template_id The unique identifier of the template. If this is not provided, DocuSign will generate a value.
      * @var string
      */
    protected $template_id;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $shared When set to **true**, this custom tab is shared.
      * @var string
      */
    protected $shared;
    
    /**
      * $password 
      * @var string
      */
    protected $password;
    
    /**
      * $new_password 
      * @var string
      */
    protected $new_password;
    
    /**
      * $description 
      * @var string
      */
    protected $description;
    
    /**
      * $last_modified 
      * @var string
      */
    protected $last_modified;
    
    /**
      * $last_modified_by 
      * @var \DocuSign\eSign\Model\UserInfo
      */
    protected $last_modified_by;
    
    /**
      * $page_count An integer value specifying the number of document pages in the template. Omit this property if not submitting a page count.
      * @var int
      */
    protected $page_count;
    
    /**
      * $uri 
      * @var string
      */
    protected $uri;
    
    /**
      * $folder_name The name of the folder in which the template is located.
      * @var string
      */
    protected $folder_name;
    
    /**
      * $folder_id The ID for the folder.
      * @var string
      */
    protected $folder_id;
    
    /**
      * $folder_uri The URI of the folder.
      * @var string
      */
    protected $folder_uri;
    
    /**
      * $parent_folder_uri 
      * @var string
      */
    protected $parent_folder_uri;
    
    /**
      * $owner 
      * @var \DocuSign\eSign\Model\UserInfo
      */
    protected $owner;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->template_id = $data["template_id"];
            $this->name = $data["name"];
            $this->shared = $data["shared"];
            $this->password = $data["password"];
            $this->new_password = $data["new_password"];
            $this->description = $data["description"];
            $this->last_modified = $data["last_modified"];
            $this->last_modified_by = $data["last_modified_by"];
            $this->page_count = $data["page_count"];
            $this->uri = $data["uri"];
            $this->folder_name = $data["folder_name"];
            $this->folder_id = $data["folder_id"];
            $this->folder_uri = $data["folder_uri"];
            $this->parent_folder_uri = $data["parent_folder_uri"];
            $this->owner = $data["owner"];
        }
    }
    
    /**
     * Gets template_id
     * @return string
     */
    public function getTemplateId()
    {
        return $this->template_id;
    }
  
    /**
     * Sets template_id
     * @param string $template_id The unique identifier of the template. If this is not provided, DocuSign will generate a value.
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        
        $this->template_id = $template_id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets shared
     * @return string
     */
    public function getShared()
    {
        return $this->shared;
    }
  
    /**
     * Sets shared
     * @param string $shared When set to **true**, this custom tab is shared.
     * @return $this
     */
    public function setShared($shared)
    {
        
        $this->shared = $shared;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password 
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets new_password
     * @return string
     */
    public function getNewPassword()
    {
        return $this->new_password;
    }
  
    /**
     * Sets new_password
     * @param string $new_password 
     * @return $this
     */
    public function setNewPassword($new_password)
    {
        
        $this->new_password = $new_password;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description 
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets last_modified
     * @return string
     */
    public function getLastModified()
    {
        return $this->last_modified;
    }
  
    /**
     * Sets last_modified
     * @param string $last_modified 
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        
        $this->last_modified = $last_modified;
        return $this;
    }
    
    /**
     * Gets last_modified_by
     * @return \DocuSign\eSign\Model\UserInfo
     */
    public function getLastModifiedBy()
    {
        return $this->last_modified_by;
    }
  
    /**
     * Sets last_modified_by
     * @param \DocuSign\eSign\Model\UserInfo $last_modified_by 
     * @return $this
     */
    public function setLastModifiedBy($last_modified_by)
    {
        
        $this->last_modified_by = $last_modified_by;
        return $this;
    }
    
    /**
     * Gets page_count
     * @return int
     */
    public function getPageCount()
    {
        return $this->page_count;
    }
  
    /**
     * Sets page_count
     * @param int $page_count An integer value specifying the number of document pages in the template. Omit this property if not submitting a page count.
     * @return $this
     */
    public function setPageCount($page_count)
    {
        
        $this->page_count = $page_count;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri 
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Gets folder_name
     * @return string
     */
    public function getFolderName()
    {
        return $this->folder_name;
    }
  
    /**
     * Sets folder_name
     * @param string $folder_name The name of the folder in which the template is located.
     * @return $this
     */
    public function setFolderName($folder_name)
    {
        
        $this->folder_name = $folder_name;
        return $this;
    }
    
    /**
     * Gets folder_id
     * @return string
     */
    public function getFolderId()
    {
        return $this->folder_id;
    }
  
    /**
     * Sets folder_id
     * @param string $folder_id The ID for the folder.
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        
        $this->folder_id = $folder_id;
        return $this;
    }
    
    /**
     * Gets folder_uri
     * @return string
     */
    public function getFolderUri()
    {
        return $this->folder_uri;
    }
  
    /**
     * Sets folder_uri
     * @param string $folder_uri The URI of the folder.
     * @return $this
     */
    public function setFolderUri($folder_uri)
    {
        
        $this->folder_uri = $folder_uri;
        return $this;
    }
    
    /**
     * Gets parent_folder_uri
     * @return string
     */
    public function getParentFolderUri()
    {
        return $this->parent_folder_uri;
    }
  
    /**
     * Sets parent_folder_uri
     * @param string $parent_folder_uri 
     * @return $this
     */
    public function setParentFolderUri($parent_folder_uri)
    {
        
        $this->parent_folder_uri = $parent_folder_uri;
        return $this;
    }
    
    /**
     * Gets owner
     * @return \DocuSign\eSign\Model\UserInfo
     */
    public function getOwner()
    {
        return $this->owner;
    }
  
    /**
     * Sets owner
     * @param \DocuSign\eSign\Model\UserInfo $owner 
     * @return $this
     */
    public function setOwner($owner)
    {
        
        $this->owner = $owner;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
