<?php
/**
 * TabMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * TabMetadata Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TabMetadata implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'font' => 'string',
        'bold' => 'string',
        'italic' => 'string',
        'underline' => 'string',
        'font_color' => 'string',
        'font_size' => 'string',
        'height' => 'string',
        'width' => 'string',
        'custom_tab_id' => 'string',
        'initial_value' => 'string',
        'included_in_email' => 'string',
        'disable_auto_size' => 'string',
        'conceal_value_on_document' => 'string',
        'locked' => 'string',
        'required' => 'string',
        'shared' => 'string',
        'items' => 'string[]',
        'tab_label' => 'string',
        'maximum_length' => 'string',
        'anchor' => 'string',
        'anchor_x_offset' => 'string',
        'anchor_y_offset' => 'string',
        'anchor_units' => 'string',
        'anchor_ignore_if_not_present' => 'string',
        'anchor_match_whole_word' => 'string',
        'anchor_case_sensitive' => 'string',
        'anchor_horizontal_alignment' => 'string',
        'name' => 'string',
        'type' => 'string',
        'validation_message' => 'string',
        'validation_pattern' => 'string',
        'last_modified_by_user_id' => 'string',
        'last_modified_by_display_name' => 'string',
        'last_modified' => 'string',
        'created_by_user_id' => 'string',
        'created_by_display_name' => 'string',
        'editable' => 'string',
        'merge_field' => '\DocuSign\eSign\Model\MergeField'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'font' => 'font',
        'bold' => 'bold',
        'italic' => 'italic',
        'underline' => 'underline',
        'font_color' => 'fontColor',
        'font_size' => 'fontSize',
        'height' => 'height',
        'width' => 'width',
        'custom_tab_id' => 'customTabId',
        'initial_value' => 'initialValue',
        'included_in_email' => 'includedInEmail',
        'disable_auto_size' => 'disableAutoSize',
        'conceal_value_on_document' => 'concealValueOnDocument',
        'locked' => 'locked',
        'required' => 'required',
        'shared' => 'shared',
        'items' => 'items',
        'tab_label' => 'tabLabel',
        'maximum_length' => 'maximumLength',
        'anchor' => 'anchor',
        'anchor_x_offset' => 'anchorXOffset',
        'anchor_y_offset' => 'anchorYOffset',
        'anchor_units' => 'anchorUnits',
        'anchor_ignore_if_not_present' => 'anchorIgnoreIfNotPresent',
        'anchor_match_whole_word' => 'anchorMatchWholeWord',
        'anchor_case_sensitive' => 'anchorCaseSensitive',
        'anchor_horizontal_alignment' => 'anchorHorizontalAlignment',
        'name' => 'name',
        'type' => 'type',
        'validation_message' => 'validationMessage',
        'validation_pattern' => 'validationPattern',
        'last_modified_by_user_id' => 'lastModifiedByUserId',
        'last_modified_by_display_name' => 'lastModifiedByDisplayName',
        'last_modified' => 'lastModified',
        'created_by_user_id' => 'createdByUserId',
        'created_by_display_name' => 'createdByDisplayName',
        'editable' => 'editable',
        'merge_field' => 'mergeField'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'font' => 'setFont',
        'bold' => 'setBold',
        'italic' => 'setItalic',
        'underline' => 'setUnderline',
        'font_color' => 'setFontColor',
        'font_size' => 'setFontSize',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'custom_tab_id' => 'setCustomTabId',
        'initial_value' => 'setInitialValue',
        'included_in_email' => 'setIncludedInEmail',
        'disable_auto_size' => 'setDisableAutoSize',
        'conceal_value_on_document' => 'setConcealValueOnDocument',
        'locked' => 'setLocked',
        'required' => 'setRequired',
        'shared' => 'setShared',
        'items' => 'setItems',
        'tab_label' => 'setTabLabel',
        'maximum_length' => 'setMaximumLength',
        'anchor' => 'setAnchor',
        'anchor_x_offset' => 'setAnchorXOffset',
        'anchor_y_offset' => 'setAnchorYOffset',
        'anchor_units' => 'setAnchorUnits',
        'anchor_ignore_if_not_present' => 'setAnchorIgnoreIfNotPresent',
        'anchor_match_whole_word' => 'setAnchorMatchWholeWord',
        'anchor_case_sensitive' => 'setAnchorCaseSensitive',
        'anchor_horizontal_alignment' => 'setAnchorHorizontalAlignment',
        'name' => 'setName',
        'type' => 'setType',
        'validation_message' => 'setValidationMessage',
        'validation_pattern' => 'setValidationPattern',
        'last_modified_by_user_id' => 'setLastModifiedByUserId',
        'last_modified_by_display_name' => 'setLastModifiedByDisplayName',
        'last_modified' => 'setLastModified',
        'created_by_user_id' => 'setCreatedByUserId',
        'created_by_display_name' => 'setCreatedByDisplayName',
        'editable' => 'setEditable',
        'merge_field' => 'setMergeField'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'font' => 'getFont',
        'bold' => 'getBold',
        'italic' => 'getItalic',
        'underline' => 'getUnderline',
        'font_color' => 'getFontColor',
        'font_size' => 'getFontSize',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'custom_tab_id' => 'getCustomTabId',
        'initial_value' => 'getInitialValue',
        'included_in_email' => 'getIncludedInEmail',
        'disable_auto_size' => 'getDisableAutoSize',
        'conceal_value_on_document' => 'getConcealValueOnDocument',
        'locked' => 'getLocked',
        'required' => 'getRequired',
        'shared' => 'getShared',
        'items' => 'getItems',
        'tab_label' => 'getTabLabel',
        'maximum_length' => 'getMaximumLength',
        'anchor' => 'getAnchor',
        'anchor_x_offset' => 'getAnchorXOffset',
        'anchor_y_offset' => 'getAnchorYOffset',
        'anchor_units' => 'getAnchorUnits',
        'anchor_ignore_if_not_present' => 'getAnchorIgnoreIfNotPresent',
        'anchor_match_whole_word' => 'getAnchorMatchWholeWord',
        'anchor_case_sensitive' => 'getAnchorCaseSensitive',
        'anchor_horizontal_alignment' => 'getAnchorHorizontalAlignment',
        'name' => 'getName',
        'type' => 'getType',
        'validation_message' => 'getValidationMessage',
        'validation_pattern' => 'getValidationPattern',
        'last_modified_by_user_id' => 'getLastModifiedByUserId',
        'last_modified_by_display_name' => 'getLastModifiedByDisplayName',
        'last_modified' => 'getLastModified',
        'created_by_user_id' => 'getCreatedByUserId',
        'created_by_display_name' => 'getCreatedByDisplayName',
        'editable' => 'getEditable',
        'merge_field' => 'getMergeField'
    );
  
    
    /**
      * $font The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
      * @var string
      */
    protected $font;
    
    /**
      * $bold When set to **true**, the information in the tab is bold.
      * @var string
      */
    protected $bold;
    
    /**
      * $italic When set to **true**, the information in the tab is italic.
      * @var string
      */
    protected $italic;
    
    /**
      * $underline When set to **true**, the information in the tab is underlined.
      * @var string
      */
    protected $underline;
    
    /**
      * $font_color The font color used for the information in the tab.\n\nPossible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
      * @var string
      */
    protected $font_color;
    
    /**
      * $font_size The font size used for the information in the tab.\n\nPossible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
      * @var string
      */
    protected $font_size;
    
    /**
      * $height Height of the tab in pixels.
      * @var string
      */
    protected $height;
    
    /**
      * $width Width of the tab in pixels.
      * @var string
      */
    protected $width;
    
    /**
      * $custom_tab_id The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
      * @var string
      */
    protected $custom_tab_id;
    
    /**
      * $initial_value The original value of the tab.
      * @var string
      */
    protected $initial_value;
    
    /**
      * $included_in_email When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
      * @var string
      */
    protected $included_in_email;
    
    /**
      * $disable_auto_size When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
      * @var string
      */
    protected $disable_auto_size;
    
    /**
      * $conceal_value_on_document When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
      * @var string
      */
    protected $conceal_value_on_document;
    
    /**
      * $locked When set to **true**, the signer cannot change the data of the custom tab.
      * @var string
      */
    protected $locked;
    
    /**
      * $required When set to **true**, the signer is required to fill out this tab
      * @var string
      */
    protected $required;
    
    /**
      * $shared When set to **true**, this custom tab is shared.
      * @var string
      */
    protected $shared;
    
    /**
      * $items If the tab is a list, this represents the values that are possible for the tab.
      * @var string[]
      */
    protected $items;
    
    /**
      * $tab_label The label string associated with the tab.
      * @var string
      */
    protected $tab_label;
    
    /**
      * $maximum_length The maximum number of entry characters supported by the custom tab.
      * @var string
      */
    protected $maximum_length;
    
    /**
      * $anchor An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
      * @var string
      */
    protected $anchor;
    
    /**
      * $anchor_x_offset Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
      * @var string
      */
    protected $anchor_x_offset;
    
    /**
      * $anchor_y_offset Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
      * @var string
      */
    protected $anchor_y_offset;
    
    /**
      * $anchor_units Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
      * @var string
      */
    protected $anchor_units;
    
    /**
      * $anchor_ignore_if_not_present When set to **true**, this tab is ignored if anchorString is not found in the document.
      * @var string
      */
    protected $anchor_ignore_if_not_present;
    
    /**
      * $anchor_match_whole_word When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
      * @var string
      */
    protected $anchor_match_whole_word;
    
    /**
      * $anchor_case_sensitive When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
      * @var string
      */
    protected $anchor_case_sensitive;
    
    /**
      * $anchor_horizontal_alignment Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
      * @var string
      */
    protected $anchor_horizontal_alignment;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $type The type of this tab. Values are: Approve, CheckBox, Company, Date, DateSigned,	Decline, Email,	EmailAddress, EnvelopeId, FirstName, Formula, FullName,	InitialHere, InitialHereOptional, LastName, List, Note, Number,	Radio, SignerAttachment, SignHere, SignHereOptional, Ssn, Text, Title, Zip5, or Zip5Dash4.
      * @var string
      */
    protected $type;
    
    /**
      * $validation_message The message displayed if the custom tab fails input validation (either custom of embedded).
      * @var string
      */
    protected $validation_message;
    
    /**
      * $validation_pattern A regular expressionn used to validate input for the tab.
      * @var string
      */
    protected $validation_pattern;
    
    /**
      * $last_modified_by_user_id The userId of the DocuSign user who last modified this object.
      * @var string
      */
    protected $last_modified_by_user_id;
    
    /**
      * $last_modified_by_display_name The User Name of the DocuSign user who last modified this object.
      * @var string
      */
    protected $last_modified_by_display_name;
    
    /**
      * $last_modified The UTC DateTime this object was last modified. This is in ISO8601 format.
      * @var string
      */
    protected $last_modified;
    
    /**
      * $created_by_user_id The userId of the DocuSign user who created this object.
      * @var string
      */
    protected $created_by_user_id;
    
    /**
      * $created_by_display_name The user name of the DocuSign user who created this object.
      * @var string
      */
    protected $created_by_display_name;
    
    /**
      * $editable When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
      * @var string
      */
    protected $editable;
    
    /**
      * $merge_field 
      * @var \DocuSign\eSign\Model\MergeField
      */
    protected $merge_field;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->font = $data["font"];
            $this->bold = $data["bold"];
            $this->italic = $data["italic"];
            $this->underline = $data["underline"];
            $this->font_color = $data["font_color"];
            $this->font_size = $data["font_size"];
            $this->height = $data["height"];
            $this->width = $data["width"];
            $this->custom_tab_id = $data["custom_tab_id"];
            $this->initial_value = $data["initial_value"];
            $this->included_in_email = $data["included_in_email"];
            $this->disable_auto_size = $data["disable_auto_size"];
            $this->conceal_value_on_document = $data["conceal_value_on_document"];
            $this->locked = $data["locked"];
            $this->required = $data["required"];
            $this->shared = $data["shared"];
            $this->items = $data["items"];
            $this->tab_label = $data["tab_label"];
            $this->maximum_length = $data["maximum_length"];
            $this->anchor = $data["anchor"];
            $this->anchor_x_offset = $data["anchor_x_offset"];
            $this->anchor_y_offset = $data["anchor_y_offset"];
            $this->anchor_units = $data["anchor_units"];
            $this->anchor_ignore_if_not_present = $data["anchor_ignore_if_not_present"];
            $this->anchor_match_whole_word = $data["anchor_match_whole_word"];
            $this->anchor_case_sensitive = $data["anchor_case_sensitive"];
            $this->anchor_horizontal_alignment = $data["anchor_horizontal_alignment"];
            $this->name = $data["name"];
            $this->type = $data["type"];
            $this->validation_message = $data["validation_message"];
            $this->validation_pattern = $data["validation_pattern"];
            $this->last_modified_by_user_id = $data["last_modified_by_user_id"];
            $this->last_modified_by_display_name = $data["last_modified_by_display_name"];
            $this->last_modified = $data["last_modified"];
            $this->created_by_user_id = $data["created_by_user_id"];
            $this->created_by_display_name = $data["created_by_display_name"];
            $this->editable = $data["editable"];
            $this->merge_field = $data["merge_field"];
        }
    }
    
    /**
     * Gets font
     * @return string
     */
    public function getFont()
    {
        return $this->font;
    }
  
    /**
     * Sets font
     * @param string $font The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
     * @return $this
     */
    public function setFont($font)
    {
        
        $this->font = $font;
        return $this;
    }
    
    /**
     * Gets bold
     * @return string
     */
    public function getBold()
    {
        return $this->bold;
    }
  
    /**
     * Sets bold
     * @param string $bold When set to **true**, the information in the tab is bold.
     * @return $this
     */
    public function setBold($bold)
    {
        
        $this->bold = $bold;
        return $this;
    }
    
    /**
     * Gets italic
     * @return string
     */
    public function getItalic()
    {
        return $this->italic;
    }
  
    /**
     * Sets italic
     * @param string $italic When set to **true**, the information in the tab is italic.
     * @return $this
     */
    public function setItalic($italic)
    {
        
        $this->italic = $italic;
        return $this;
    }
    
    /**
     * Gets underline
     * @return string
     */
    public function getUnderline()
    {
        return $this->underline;
    }
  
    /**
     * Sets underline
     * @param string $underline When set to **true**, the information in the tab is underlined.
     * @return $this
     */
    public function setUnderline($underline)
    {
        
        $this->underline = $underline;
        return $this;
    }
    
    /**
     * Gets font_color
     * @return string
     */
    public function getFontColor()
    {
        return $this->font_color;
    }
  
    /**
     * Sets font_color
     * @param string $font_color The font color used for the information in the tab.\n\nPossible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
     * @return $this
     */
    public function setFontColor($font_color)
    {
        
        $this->font_color = $font_color;
        return $this;
    }
    
    /**
     * Gets font_size
     * @return string
     */
    public function getFontSize()
    {
        return $this->font_size;
    }
  
    /**
     * Sets font_size
     * @param string $font_size The font size used for the information in the tab.\n\nPossible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
     * @return $this
     */
    public function setFontSize($font_size)
    {
        
        $this->font_size = $font_size;
        return $this;
    }
    
    /**
     * Gets height
     * @return string
     */
    public function getHeight()
    {
        return $this->height;
    }
  
    /**
     * Sets height
     * @param string $height Height of the tab in pixels.
     * @return $this
     */
    public function setHeight($height)
    {
        
        $this->height = $height;
        return $this;
    }
    
    /**
     * Gets width
     * @return string
     */
    public function getWidth()
    {
        return $this->width;
    }
  
    /**
     * Sets width
     * @param string $width Width of the tab in pixels.
     * @return $this
     */
    public function setWidth($width)
    {
        
        $this->width = $width;
        return $this;
    }
    
    /**
     * Gets custom_tab_id
     * @return string
     */
    public function getCustomTabId()
    {
        return $this->custom_tab_id;
    }
  
    /**
     * Sets custom_tab_id
     * @param string $custom_tab_id The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
     * @return $this
     */
    public function setCustomTabId($custom_tab_id)
    {
        
        $this->custom_tab_id = $custom_tab_id;
        return $this;
    }
    
    /**
     * Gets initial_value
     * @return string
     */
    public function getInitialValue()
    {
        return $this->initial_value;
    }
  
    /**
     * Sets initial_value
     * @param string $initial_value The original value of the tab.
     * @return $this
     */
    public function setInitialValue($initial_value)
    {
        
        $this->initial_value = $initial_value;
        return $this;
    }
    
    /**
     * Gets included_in_email
     * @return string
     */
    public function getIncludedInEmail()
    {
        return $this->included_in_email;
    }
  
    /**
     * Sets included_in_email
     * @param string $included_in_email When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
     * @return $this
     */
    public function setIncludedInEmail($included_in_email)
    {
        
        $this->included_in_email = $included_in_email;
        return $this;
    }
    
    /**
     * Gets disable_auto_size
     * @return string
     */
    public function getDisableAutoSize()
    {
        return $this->disable_auto_size;
    }
  
    /**
     * Sets disable_auto_size
     * @param string $disable_auto_size When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
     * @return $this
     */
    public function setDisableAutoSize($disable_auto_size)
    {
        
        $this->disable_auto_size = $disable_auto_size;
        return $this;
    }
    
    /**
     * Gets conceal_value_on_document
     * @return string
     */
    public function getConcealValueOnDocument()
    {
        return $this->conceal_value_on_document;
    }
  
    /**
     * Sets conceal_value_on_document
     * @param string $conceal_value_on_document When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.\n\nWhen an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.\n\nThis setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
     * @return $this
     */
    public function setConcealValueOnDocument($conceal_value_on_document)
    {
        
        $this->conceal_value_on_document = $conceal_value_on_document;
        return $this;
    }
    
    /**
     * Gets locked
     * @return string
     */
    public function getLocked()
    {
        return $this->locked;
    }
  
    /**
     * Sets locked
     * @param string $locked When set to **true**, the signer cannot change the data of the custom tab.
     * @return $this
     */
    public function setLocked($locked)
    {
        
        $this->locked = $locked;
        return $this;
    }
    
    /**
     * Gets required
     * @return string
     */
    public function getRequired()
    {
        return $this->required;
    }
  
    /**
     * Sets required
     * @param string $required When set to **true**, the signer is required to fill out this tab
     * @return $this
     */
    public function setRequired($required)
    {
        
        $this->required = $required;
        return $this;
    }
    
    /**
     * Gets shared
     * @return string
     */
    public function getShared()
    {
        return $this->shared;
    }
  
    /**
     * Sets shared
     * @param string $shared When set to **true**, this custom tab is shared.
     * @return $this
     */
    public function setShared($shared)
    {
        
        $this->shared = $shared;
        return $this;
    }
    
    /**
     * Gets items
     * @return string[]
     */
    public function getItems()
    {
        return $this->items;
    }
  
    /**
     * Sets items
     * @param string[] $items If the tab is a list, this represents the values that are possible for the tab.
     * @return $this
     */
    public function setItems($items)
    {
        
        $this->items = $items;
        return $this;
    }
    
    /**
     * Gets tab_label
     * @return string
     */
    public function getTabLabel()
    {
        return $this->tab_label;
    }
  
    /**
     * Sets tab_label
     * @param string $tab_label The label string associated with the tab.
     * @return $this
     */
    public function setTabLabel($tab_label)
    {
        
        $this->tab_label = $tab_label;
        return $this;
    }
    
    /**
     * Gets maximum_length
     * @return string
     */
    public function getMaximumLength()
    {
        return $this->maximum_length;
    }
  
    /**
     * Sets maximum_length
     * @param string $maximum_length The maximum number of entry characters supported by the custom tab.
     * @return $this
     */
    public function setMaximumLength($maximum_length)
    {
        
        $this->maximum_length = $maximum_length;
        return $this;
    }
    
    /**
     * Gets anchor
     * @return string
     */
    public function getAnchor()
    {
        return $this->anchor;
    }
  
    /**
     * Sets anchor
     * @param string $anchor An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
     * @return $this
     */
    public function setAnchor($anchor)
    {
        
        $this->anchor = $anchor;
        return $this;
    }
    
    /**
     * Gets anchor_x_offset
     * @return string
     */
    public function getAnchorXOffset()
    {
        return $this->anchor_x_offset;
    }
  
    /**
     * Sets anchor_x_offset
     * @param string $anchor_x_offset Specifies the X axis location of the tab, in achorUnits, relative to the anchorString.
     * @return $this
     */
    public function setAnchorXOffset($anchor_x_offset)
    {
        
        $this->anchor_x_offset = $anchor_x_offset;
        return $this;
    }
    
    /**
     * Gets anchor_y_offset
     * @return string
     */
    public function getAnchorYOffset()
    {
        return $this->anchor_y_offset;
    }
  
    /**
     * Sets anchor_y_offset
     * @param string $anchor_y_offset Specifies the Y axis location of the tab, in achorUnits, relative to the anchorString.
     * @return $this
     */
    public function setAnchorYOffset($anchor_y_offset)
    {
        
        $this->anchor_y_offset = $anchor_y_offset;
        return $this;
    }
    
    /**
     * Gets anchor_units
     * @return string
     */
    public function getAnchorUnits()
    {
        return $this->anchor_units;
    }
  
    /**
     * Sets anchor_units
     * @param string $anchor_units Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
     * @return $this
     */
    public function setAnchorUnits($anchor_units)
    {
        
        $this->anchor_units = $anchor_units;
        return $this;
    }
    
    /**
     * Gets anchor_ignore_if_not_present
     * @return string
     */
    public function getAnchorIgnoreIfNotPresent()
    {
        return $this->anchor_ignore_if_not_present;
    }
  
    /**
     * Sets anchor_ignore_if_not_present
     * @param string $anchor_ignore_if_not_present When set to **true**, this tab is ignored if anchorString is not found in the document.
     * @return $this
     */
    public function setAnchorIgnoreIfNotPresent($anchor_ignore_if_not_present)
    {
        
        $this->anchor_ignore_if_not_present = $anchor_ignore_if_not_present;
        return $this;
    }
    
    /**
     * Gets anchor_match_whole_word
     * @return string
     */
    public function getAnchorMatchWholeWord()
    {
        return $this->anchor_match_whole_word;
    }
  
    /**
     * Sets anchor_match_whole_word
     * @param string $anchor_match_whole_word When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
     * @return $this
     */
    public function setAnchorMatchWholeWord($anchor_match_whole_word)
    {
        
        $this->anchor_match_whole_word = $anchor_match_whole_word;
        return $this;
    }
    
    /**
     * Gets anchor_case_sensitive
     * @return string
     */
    public function getAnchorCaseSensitive()
    {
        return $this->anchor_case_sensitive;
    }
  
    /**
     * Sets anchor_case_sensitive
     * @param string $anchor_case_sensitive When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
     * @return $this
     */
    public function setAnchorCaseSensitive($anchor_case_sensitive)
    {
        
        $this->anchor_case_sensitive = $anchor_case_sensitive;
        return $this;
    }
    
    /**
     * Gets anchor_horizontal_alignment
     * @return string
     */
    public function getAnchorHorizontalAlignment()
    {
        return $this->anchor_horizontal_alignment;
    }
  
    /**
     * Sets anchor_horizontal_alignment
     * @param string $anchor_horizontal_alignment Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
     * @return $this
     */
    public function setAnchorHorizontalAlignment($anchor_horizontal_alignment)
    {
        
        $this->anchor_horizontal_alignment = $anchor_horizontal_alignment;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type The type of this tab. Values are: Approve, CheckBox, Company, Date, DateSigned,	Decline, Email,	EmailAddress, EnvelopeId, FirstName, Formula, FullName,	InitialHere, InitialHereOptional, LastName, List, Note, Number,	Radio, SignerAttachment, SignHere, SignHereOptional, Ssn, Text, Title, Zip5, or Zip5Dash4.
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets validation_message
     * @return string
     */
    public function getValidationMessage()
    {
        return $this->validation_message;
    }
  
    /**
     * Sets validation_message
     * @param string $validation_message The message displayed if the custom tab fails input validation (either custom of embedded).
     * @return $this
     */
    public function setValidationMessage($validation_message)
    {
        
        $this->validation_message = $validation_message;
        return $this;
    }
    
    /**
     * Gets validation_pattern
     * @return string
     */
    public function getValidationPattern()
    {
        return $this->validation_pattern;
    }
  
    /**
     * Sets validation_pattern
     * @param string $validation_pattern A regular expressionn used to validate input for the tab.
     * @return $this
     */
    public function setValidationPattern($validation_pattern)
    {
        
        $this->validation_pattern = $validation_pattern;
        return $this;
    }
    
    /**
     * Gets last_modified_by_user_id
     * @return string
     */
    public function getLastModifiedByUserId()
    {
        return $this->last_modified_by_user_id;
    }
  
    /**
     * Sets last_modified_by_user_id
     * @param string $last_modified_by_user_id The userId of the DocuSign user who last modified this object.
     * @return $this
     */
    public function setLastModifiedByUserId($last_modified_by_user_id)
    {
        
        $this->last_modified_by_user_id = $last_modified_by_user_id;
        return $this;
    }
    
    /**
     * Gets last_modified_by_display_name
     * @return string
     */
    public function getLastModifiedByDisplayName()
    {
        return $this->last_modified_by_display_name;
    }
  
    /**
     * Sets last_modified_by_display_name
     * @param string $last_modified_by_display_name The User Name of the DocuSign user who last modified this object.
     * @return $this
     */
    public function setLastModifiedByDisplayName($last_modified_by_display_name)
    {
        
        $this->last_modified_by_display_name = $last_modified_by_display_name;
        return $this;
    }
    
    /**
     * Gets last_modified
     * @return string
     */
    public function getLastModified()
    {
        return $this->last_modified;
    }
  
    /**
     * Sets last_modified
     * @param string $last_modified The UTC DateTime this object was last modified. This is in ISO8601 format.
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        
        $this->last_modified = $last_modified;
        return $this;
    }
    
    /**
     * Gets created_by_user_id
     * @return string
     */
    public function getCreatedByUserId()
    {
        return $this->created_by_user_id;
    }
  
    /**
     * Sets created_by_user_id
     * @param string $created_by_user_id The userId of the DocuSign user who created this object.
     * @return $this
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        
        $this->created_by_user_id = $created_by_user_id;
        return $this;
    }
    
    /**
     * Gets created_by_display_name
     * @return string
     */
    public function getCreatedByDisplayName()
    {
        return $this->created_by_display_name;
    }
  
    /**
     * Sets created_by_display_name
     * @param string $created_by_display_name The user name of the DocuSign user who created this object.
     * @return $this
     */
    public function setCreatedByDisplayName($created_by_display_name)
    {
        
        $this->created_by_display_name = $created_by_display_name;
        return $this;
    }
    
    /**
     * Gets editable
     * @return string
     */
    public function getEditable()
    {
        return $this->editable;
    }
  
    /**
     * Sets editable
     * @param string $editable When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
     * @return $this
     */
    public function setEditable($editable)
    {
        
        $this->editable = $editable;
        return $this;
    }
    
    /**
     * Gets merge_field
     * @return \DocuSign\eSign\Model\MergeField
     */
    public function getMergeField()
    {
        return $this->merge_field;
    }
  
    /**
     * Sets merge_field
     * @param \DocuSign\eSign\Model\MergeField $merge_field 
     * @return $this
     */
    public function setMergeField($merge_field)
    {
        
        $this->merge_field = $merge_field;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
