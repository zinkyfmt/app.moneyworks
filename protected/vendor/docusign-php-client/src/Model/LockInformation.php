<?php
/**
 * LockInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * LockInformation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LockInformation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'locked_by_user' => '\DocuSign\eSign\Model\UserInfo',
        'locked_by_app' => 'string',
        'locked_until_date_time' => 'string',
        'lock_duration_in_seconds' => 'string',
        'lock_type' => 'string',
        'use_scratch_pad' => 'string',
        'lock_token' => 'string',
        'error_details' => '\DocuSign\eSign\Model\ErrorDetails'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'locked_by_user' => 'lockedByUser',
        'locked_by_app' => 'lockedByApp',
        'locked_until_date_time' => 'lockedUntilDateTime',
        'lock_duration_in_seconds' => 'lockDurationInSeconds',
        'lock_type' => 'lockType',
        'use_scratch_pad' => 'useScratchPad',
        'lock_token' => 'lockToken',
        'error_details' => 'errorDetails'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'locked_by_user' => 'setLockedByUser',
        'locked_by_app' => 'setLockedByApp',
        'locked_until_date_time' => 'setLockedUntilDateTime',
        'lock_duration_in_seconds' => 'setLockDurationInSeconds',
        'lock_type' => 'setLockType',
        'use_scratch_pad' => 'setUseScratchPad',
        'lock_token' => 'setLockToken',
        'error_details' => 'setErrorDetails'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'locked_by_user' => 'getLockedByUser',
        'locked_by_app' => 'getLockedByApp',
        'locked_until_date_time' => 'getLockedUntilDateTime',
        'lock_duration_in_seconds' => 'getLockDurationInSeconds',
        'lock_type' => 'getLockType',
        'use_scratch_pad' => 'getUseScratchPad',
        'lock_token' => 'getLockToken',
        'error_details' => 'getErrorDetails'
    );
  
    
    /**
      * $locked_by_user 
      * @var \DocuSign\eSign\Model\UserInfo
      */
    protected $locked_by_user;
    
    /**
      * $locked_by_app Specifies the friendly name of  the application that is locking the envelope.
      * @var string
      */
    protected $locked_by_app;
    
    /**
      * $locked_until_date_time 
      * @var string
      */
    protected $locked_until_date_time;
    
    /**
      * $lock_duration_in_seconds Sets the time, in seconds, until the lock expires when there is no activity on the envelope.\n\nIf no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.\n\nThe lock duration can be extended.
      * @var string
      */
    protected $lock_duration_in_seconds;
    
    /**
      * $lock_type 
      * @var string
      */
    protected $lock_type;
    
    /**
      * $use_scratch_pad Reserved for future use.\n\nIndicates whether a scratchpad is used for editing information.
      * @var string
      */
    protected $use_scratch_pad;
    
    /**
      * $lock_token 
      * @var string
      */
    protected $lock_token;
    
    /**
      * $error_details 
      * @var \DocuSign\eSign\Model\ErrorDetails
      */
    protected $error_details;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->locked_by_user = $data["locked_by_user"];
            $this->locked_by_app = $data["locked_by_app"];
            $this->locked_until_date_time = $data["locked_until_date_time"];
            $this->lock_duration_in_seconds = $data["lock_duration_in_seconds"];
            $this->lock_type = $data["lock_type"];
            $this->use_scratch_pad = $data["use_scratch_pad"];
            $this->lock_token = $data["lock_token"];
            $this->error_details = $data["error_details"];
        }
    }
    
    /**
     * Gets locked_by_user
     * @return \DocuSign\eSign\Model\UserInfo
     */
    public function getLockedByUser()
    {
        return $this->locked_by_user;
    }
  
    /**
     * Sets locked_by_user
     * @param \DocuSign\eSign\Model\UserInfo $locked_by_user 
     * @return $this
     */
    public function setLockedByUser($locked_by_user)
    {
        
        $this->locked_by_user = $locked_by_user;
        return $this;
    }
    
    /**
     * Gets locked_by_app
     * @return string
     */
    public function getLockedByApp()
    {
        return $this->locked_by_app;
    }
  
    /**
     * Sets locked_by_app
     * @param string $locked_by_app Specifies the friendly name of  the application that is locking the envelope.
     * @return $this
     */
    public function setLockedByApp($locked_by_app)
    {
        
        $this->locked_by_app = $locked_by_app;
        return $this;
    }
    
    /**
     * Gets locked_until_date_time
     * @return string
     */
    public function getLockedUntilDateTime()
    {
        return $this->locked_until_date_time;
    }
  
    /**
     * Sets locked_until_date_time
     * @param string $locked_until_date_time 
     * @return $this
     */
    public function setLockedUntilDateTime($locked_until_date_time)
    {
        
        $this->locked_until_date_time = $locked_until_date_time;
        return $this;
    }
    
    /**
     * Gets lock_duration_in_seconds
     * @return string
     */
    public function getLockDurationInSeconds()
    {
        return $this->lock_duration_in_seconds;
    }
  
    /**
     * Sets lock_duration_in_seconds
     * @param string $lock_duration_in_seconds Sets the time, in seconds, until the lock expires when there is no activity on the envelope.\n\nIf no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.\n\nThe lock duration can be extended.
     * @return $this
     */
    public function setLockDurationInSeconds($lock_duration_in_seconds)
    {
        
        $this->lock_duration_in_seconds = $lock_duration_in_seconds;
        return $this;
    }
    
    /**
     * Gets lock_type
     * @return string
     */
    public function getLockType()
    {
        return $this->lock_type;
    }
  
    /**
     * Sets lock_type
     * @param string $lock_type 
     * @return $this
     */
    public function setLockType($lock_type)
    {
        
        $this->lock_type = $lock_type;
        return $this;
    }
    
    /**
     * Gets use_scratch_pad
     * @return string
     */
    public function getUseScratchPad()
    {
        return $this->use_scratch_pad;
    }
  
    /**
     * Sets use_scratch_pad
     * @param string $use_scratch_pad Reserved for future use.\n\nIndicates whether a scratchpad is used for editing information.
     * @return $this
     */
    public function setUseScratchPad($use_scratch_pad)
    {
        
        $this->use_scratch_pad = $use_scratch_pad;
        return $this;
    }
    
    /**
     * Gets lock_token
     * @return string
     */
    public function getLockToken()
    {
        return $this->lock_token;
    }
  
    /**
     * Sets lock_token
     * @param string $lock_token 
     * @return $this
     */
    public function setLockToken($lock_token)
    {
        
        $this->lock_token = $lock_token;
        return $this;
    }
    
    /**
     * Gets error_details
     * @return \DocuSign\eSign\Model\ErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->error_details;
    }
  
    /**
     * Sets error_details
     * @param \DocuSign\eSign\Model\ErrorDetails $error_details 
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        
        $this->error_details = $error_details;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
