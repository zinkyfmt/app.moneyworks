<?php
/**
 * TemplateRecipients
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * TemplateRecipients Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TemplateRecipients implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'signers' => '\DocuSign\eSign\Model\Signer[]',
        'agents' => '\DocuSign\eSign\Model\Agent[]',
        'editors' => '\DocuSign\eSign\Model\Editor[]',
        'intermediaries' => '\DocuSign\eSign\Model\Intermediary[]',
        'carbon_copies' => '\DocuSign\eSign\Model\CarbonCopy[]',
        'certified_deliveries' => '\DocuSign\eSign\Model\CertifiedDelivery[]',
        'in_person_signers' => '\DocuSign\eSign\Model\InPersonSigner[]',
        'recipient_count' => 'string',
        'current_routing_order' => 'string',
        'error_details' => '\DocuSign\eSign\Model\ErrorDetails'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'signers' => 'signers',
        'agents' => 'agents',
        'editors' => 'editors',
        'intermediaries' => 'intermediaries',
        'carbon_copies' => 'carbonCopies',
        'certified_deliveries' => 'certifiedDeliveries',
        'in_person_signers' => 'inPersonSigners',
        'recipient_count' => 'recipientCount',
        'current_routing_order' => 'currentRoutingOrder',
        'error_details' => 'errorDetails'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'signers' => 'setSigners',
        'agents' => 'setAgents',
        'editors' => 'setEditors',
        'intermediaries' => 'setIntermediaries',
        'carbon_copies' => 'setCarbonCopies',
        'certified_deliveries' => 'setCertifiedDeliveries',
        'in_person_signers' => 'setInPersonSigners',
        'recipient_count' => 'setRecipientCount',
        'current_routing_order' => 'setCurrentRoutingOrder',
        'error_details' => 'setErrorDetails'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'signers' => 'getSigners',
        'agents' => 'getAgents',
        'editors' => 'getEditors',
        'intermediaries' => 'getIntermediaries',
        'carbon_copies' => 'getCarbonCopies',
        'certified_deliveries' => 'getCertifiedDeliveries',
        'in_person_signers' => 'getInPersonSigners',
        'recipient_count' => 'getRecipientCount',
        'current_routing_order' => 'getCurrentRoutingOrder',
        'error_details' => 'getErrorDetails'
    );
  
    
    /**
      * $signers A complex type containing information about the Signer recipient.
      * @var \DocuSign\eSign\Model\Signer[]
      */
    protected $signers;
    
    /**
      * $agents A complex type defining the management and access rights of a recipient assigned assigned as an agent on the document.
      * @var \DocuSign\eSign\Model\Agent[]
      */
    protected $agents;
    
    /**
      * $editors 
      * @var \DocuSign\eSign\Model\Editor[]
      */
    protected $editors;
    
    /**
      * $intermediaries Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
      * @var \DocuSign\eSign\Model\Intermediary[]
      */
    protected $intermediaries;
    
    /**
      * $carbon_copies A complex type containing information about recipients who should receive a copy of the envelope, but does not need to sign it.
      * @var \DocuSign\eSign\Model\CarbonCopy[]
      */
    protected $carbon_copies;
    
    /**
      * $certified_deliveries A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
      * @var \DocuSign\eSign\Model\CertifiedDelivery[]
      */
    protected $certified_deliveries;
    
    /**
      * $in_person_signers Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
      * @var \DocuSign\eSign\Model\InPersonSigner[]
      */
    protected $in_person_signers;
    
    /**
      * $recipient_count The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:\n\n* recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.\n* includeDocuments - When set to **true**, the envelope time zone information is included in the message.
      * @var string
      */
    protected $recipient_count;
    
    /**
      * $current_routing_order 
      * @var string
      */
    protected $current_routing_order;
    
    /**
      * $error_details 
      * @var \DocuSign\eSign\Model\ErrorDetails
      */
    protected $error_details;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->signers = $data["signers"];
            $this->agents = $data["agents"];
            $this->editors = $data["editors"];
            $this->intermediaries = $data["intermediaries"];
            $this->carbon_copies = $data["carbon_copies"];
            $this->certified_deliveries = $data["certified_deliveries"];
            $this->in_person_signers = $data["in_person_signers"];
            $this->recipient_count = $data["recipient_count"];
            $this->current_routing_order = $data["current_routing_order"];
            $this->error_details = $data["error_details"];
        }
    }
    
    /**
     * Gets signers
     * @return \DocuSign\eSign\Model\Signer[]
     */
    public function getSigners()
    {
        return $this->signers;
    }
  
    /**
     * Sets signers
     * @param \DocuSign\eSign\Model\Signer[] $signers A complex type containing information about the Signer recipient.
     * @return $this
     */
    public function setSigners($signers)
    {
        
        $this->signers = $signers;
        return $this;
    }
    
    /**
     * Gets agents
     * @return \DocuSign\eSign\Model\Agent[]
     */
    public function getAgents()
    {
        return $this->agents;
    }
  
    /**
     * Sets agents
     * @param \DocuSign\eSign\Model\Agent[] $agents A complex type defining the management and access rights of a recipient assigned assigned as an agent on the document.
     * @return $this
     */
    public function setAgents($agents)
    {
        
        $this->agents = $agents;
        return $this;
    }
    
    /**
     * Gets editors
     * @return \DocuSign\eSign\Model\Editor[]
     */
    public function getEditors()
    {
        return $this->editors;
    }
  
    /**
     * Sets editors
     * @param \DocuSign\eSign\Model\Editor[] $editors 
     * @return $this
     */
    public function setEditors($editors)
    {
        
        $this->editors = $editors;
        return $this;
    }
    
    /**
     * Gets intermediaries
     * @return \DocuSign\eSign\Model\Intermediary[]
     */
    public function getIntermediaries()
    {
        return $this->intermediaries;
    }
  
    /**
     * Sets intermediaries
     * @param \DocuSign\eSign\Model\Intermediary[] $intermediaries Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
     * @return $this
     */
    public function setIntermediaries($intermediaries)
    {
        
        $this->intermediaries = $intermediaries;
        return $this;
    }
    
    /**
     * Gets carbon_copies
     * @return \DocuSign\eSign\Model\CarbonCopy[]
     */
    public function getCarbonCopies()
    {
        return $this->carbon_copies;
    }
  
    /**
     * Sets carbon_copies
     * @param \DocuSign\eSign\Model\CarbonCopy[] $carbon_copies A complex type containing information about recipients who should receive a copy of the envelope, but does not need to sign it.
     * @return $this
     */
    public function setCarbonCopies($carbon_copies)
    {
        
        $this->carbon_copies = $carbon_copies;
        return $this;
    }
    
    /**
     * Gets certified_deliveries
     * @return \DocuSign\eSign\Model\CertifiedDelivery[]
     */
    public function getCertifiedDeliveries()
    {
        return $this->certified_deliveries;
    }
  
    /**
     * Sets certified_deliveries
     * @param \DocuSign\eSign\Model\CertifiedDelivery[] $certified_deliveries A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
     * @return $this
     */
    public function setCertifiedDeliveries($certified_deliveries)
    {
        
        $this->certified_deliveries = $certified_deliveries;
        return $this;
    }
    
    /**
     * Gets in_person_signers
     * @return \DocuSign\eSign\Model\InPersonSigner[]
     */
    public function getInPersonSigners()
    {
        return $this->in_person_signers;
    }
  
    /**
     * Sets in_person_signers
     * @param \DocuSign\eSign\Model\InPersonSigner[] $in_person_signers Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
     * @return $this
     */
    public function setInPersonSigners($in_person_signers)
    {
        
        $this->in_person_signers = $in_person_signers;
        return $this;
    }
    
    /**
     * Gets recipient_count
     * @return string
     */
    public function getRecipientCount()
    {
        return $this->recipient_count;
    }
  
    /**
     * Sets recipient_count
     * @param string $recipient_count The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:\n\n* recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.\n* includeDocuments - When set to **true**, the envelope time zone information is included in the message.
     * @return $this
     */
    public function setRecipientCount($recipient_count)
    {
        
        $this->recipient_count = $recipient_count;
        return $this;
    }
    
    /**
     * Gets current_routing_order
     * @return string
     */
    public function getCurrentRoutingOrder()
    {
        return $this->current_routing_order;
    }
  
    /**
     * Sets current_routing_order
     * @param string $current_routing_order 
     * @return $this
     */
    public function setCurrentRoutingOrder($current_routing_order)
    {
        
        $this->current_routing_order = $current_routing_order;
        return $this;
    }
    
    /**
     * Gets error_details
     * @return \DocuSign\eSign\Model\ErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->error_details;
    }
  
    /**
     * Sets error_details
     * @param \DocuSign\eSign\Model\ErrorDetails $error_details 
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        
        $this->error_details = $error_details;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
