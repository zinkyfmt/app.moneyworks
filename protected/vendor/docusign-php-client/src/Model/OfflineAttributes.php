<?php
/**
 * OfflineAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * OfflineAttributes Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OfflineAttributes implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'device_name' => 'string',
        'device_model' => 'string',
        'gps_latitude' => 'string',
        'gps_longitude' => 'string',
        'account_esign_id' => 'string',
        'offline_signing_hash' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'device_name' => 'deviceName',
        'device_model' => 'deviceModel',
        'gps_latitude' => 'gpsLatitude',
        'gps_longitude' => 'gpsLongitude',
        'account_esign_id' => 'accountEsignId',
        'offline_signing_hash' => 'offlineSigningHash'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'device_name' => 'setDeviceName',
        'device_model' => 'setDeviceModel',
        'gps_latitude' => 'setGpsLatitude',
        'gps_longitude' => 'setGpsLongitude',
        'account_esign_id' => 'setAccountEsignId',
        'offline_signing_hash' => 'setOfflineSigningHash'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'device_name' => 'getDeviceName',
        'device_model' => 'getDeviceModel',
        'gps_latitude' => 'getGpsLatitude',
        'gps_longitude' => 'getGpsLongitude',
        'account_esign_id' => 'getAccountEsignId',
        'offline_signing_hash' => 'getOfflineSigningHash'
    );
  
    
    /**
      * $device_name A string containing information about the type of device used for offline signing.
      * @var string
      */
    protected $device_name;
    
    /**
      * $device_model A string containing information about the model of the device used for offline signing.
      * @var string
      */
    protected $device_model;
    
    /**
      * $gps_latitude A string containing the latitude of the device location at the time of signing.
      * @var string
      */
    protected $gps_latitude;
    
    /**
      * $gps_longitude A string containing the longitude of the device location at the time of signing.
      * @var string
      */
    protected $gps_longitude;
    
    /**
      * $account_esign_id A GUID identifying the account associated with the consumer disclosure
      * @var string
      */
    protected $account_esign_id;
    
    /**
      * $offline_signing_hash 
      * @var string
      */
    protected $offline_signing_hash;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->device_name = $data["device_name"];
            $this->device_model = $data["device_model"];
            $this->gps_latitude = $data["gps_latitude"];
            $this->gps_longitude = $data["gps_longitude"];
            $this->account_esign_id = $data["account_esign_id"];
            $this->offline_signing_hash = $data["offline_signing_hash"];
        }
    }
    
    /**
     * Gets device_name
     * @return string
     */
    public function getDeviceName()
    {
        return $this->device_name;
    }
  
    /**
     * Sets device_name
     * @param string $device_name A string containing information about the type of device used for offline signing.
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        
        $this->device_name = $device_name;
        return $this;
    }
    
    /**
     * Gets device_model
     * @return string
     */
    public function getDeviceModel()
    {
        return $this->device_model;
    }
  
    /**
     * Sets device_model
     * @param string $device_model A string containing information about the model of the device used for offline signing.
     * @return $this
     */
    public function setDeviceModel($device_model)
    {
        
        $this->device_model = $device_model;
        return $this;
    }
    
    /**
     * Gets gps_latitude
     * @return string
     */
    public function getGpsLatitude()
    {
        return $this->gps_latitude;
    }
  
    /**
     * Sets gps_latitude
     * @param string $gps_latitude A string containing the latitude of the device location at the time of signing.
     * @return $this
     */
    public function setGpsLatitude($gps_latitude)
    {
        
        $this->gps_latitude = $gps_latitude;
        return $this;
    }
    
    /**
     * Gets gps_longitude
     * @return string
     */
    public function getGpsLongitude()
    {
        return $this->gps_longitude;
    }
  
    /**
     * Sets gps_longitude
     * @param string $gps_longitude A string containing the longitude of the device location at the time of signing.
     * @return $this
     */
    public function setGpsLongitude($gps_longitude)
    {
        
        $this->gps_longitude = $gps_longitude;
        return $this;
    }
    
    /**
     * Gets account_esign_id
     * @return string
     */
    public function getAccountEsignId()
    {
        return $this->account_esign_id;
    }
  
    /**
     * Sets account_esign_id
     * @param string $account_esign_id A GUID identifying the account associated with the consumer disclosure
     * @return $this
     */
    public function setAccountEsignId($account_esign_id)
    {
        
        $this->account_esign_id = $account_esign_id;
        return $this;
    }
    
    /**
     * Gets offline_signing_hash
     * @return string
     */
    public function getOfflineSigningHash()
    {
        return $this->offline_signing_hash;
    }
  
    /**
     * Sets offline_signing_hash
     * @param string $offline_signing_hash 
     * @return $this
     */
    public function setOfflineSigningHash($offline_signing_hash)
    {
        
        $this->offline_signing_hash = $offline_signing_hash;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
