<?php
/**
 * InlineTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * InlineTemplate Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineTemplate implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'sequence' => 'string',
        'envelope' => '\DocuSign\eSign\Model\Envelope',
        'documents' => '\DocuSign\eSign\Model\Document[]',
        'recipients' => '\DocuSign\eSign\Model\Recipients',
        'custom_fields' => '\DocuSign\eSign\Model\CustomFields'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'sequence' => 'sequence',
        'envelope' => 'envelope',
        'documents' => 'documents',
        'recipients' => 'recipients',
        'custom_fields' => 'customFields'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'sequence' => 'setSequence',
        'envelope' => 'setEnvelope',
        'documents' => 'setDocuments',
        'recipients' => 'setRecipients',
        'custom_fields' => 'setCustomFields'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'sequence' => 'getSequence',
        'envelope' => 'getEnvelope',
        'documents' => 'getDocuments',
        'recipients' => 'getRecipients',
        'custom_fields' => 'getCustomFields'
    );
  
    
    /**
      * $sequence Specifies the order in which templates are overlaid.
      * @var string
      */
    protected $sequence;
    
    /**
      * $envelope 
      * @var \DocuSign\eSign\Model\Envelope
      */
    protected $envelope;
    
    /**
      * $documents Complex element contains the details on the documents in the envelope.
      * @var \DocuSign\eSign\Model\Document[]
      */
    protected $documents;
    
    /**
      * $recipients 
      * @var \DocuSign\eSign\Model\Recipients
      */
    protected $recipients;
    
    /**
      * $custom_fields 
      * @var \DocuSign\eSign\Model\CustomFields
      */
    protected $custom_fields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->sequence = $data["sequence"];
            $this->envelope = $data["envelope"];
            $this->documents = $data["documents"];
            $this->recipients = $data["recipients"];
            $this->custom_fields = $data["custom_fields"];
        }
    }
    
    /**
     * Gets sequence
     * @return string
     */
    public function getSequence()
    {
        return $this->sequence;
    }
  
    /**
     * Sets sequence
     * @param string $sequence Specifies the order in which templates are overlaid.
     * @return $this
     */
    public function setSequence($sequence)
    {
        
        $this->sequence = $sequence;
        return $this;
    }
    
    /**
     * Gets envelope
     * @return \DocuSign\eSign\Model\Envelope
     */
    public function getEnvelope()
    {
        return $this->envelope;
    }
  
    /**
     * Sets envelope
     * @param \DocuSign\eSign\Model\Envelope $envelope 
     * @return $this
     */
    public function setEnvelope($envelope)
    {
        
        $this->envelope = $envelope;
        return $this;
    }
    
    /**
     * Gets documents
     * @return \DocuSign\eSign\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->documents;
    }
  
    /**
     * Sets documents
     * @param \DocuSign\eSign\Model\Document[] $documents Complex element contains the details on the documents in the envelope.
     * @return $this
     */
    public function setDocuments($documents)
    {
        
        $this->documents = $documents;
        return $this;
    }
    
    /**
     * Gets recipients
     * @return \DocuSign\eSign\Model\Recipients
     */
    public function getRecipients()
    {
        return $this->recipients;
    }
  
    /**
     * Sets recipients
     * @param \DocuSign\eSign\Model\Recipients $recipients 
     * @return $this
     */
    public function setRecipients($recipients)
    {
        
        $this->recipients = $recipients;
        return $this;
    }
    
    /**
     * Gets custom_fields
     * @return \DocuSign\eSign\Model\CustomFields
     */
    public function getCustomFields()
    {
        return $this->custom_fields;
    }
  
    /**
     * Sets custom_fields
     * @param \DocuSign\eSign\Model\CustomFields $custom_fields 
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->custom_fields = $custom_fields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
