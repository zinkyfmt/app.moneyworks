<?php
/**
 * EventNotification
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * EventNotification Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EventNotification implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'url' => 'string',
        'logging_enabled' => 'string',
        'require_acknowledgment' => 'string',
        'envelope_events' => '\DocuSign\eSign\Model\EnvelopeEvent[]',
        'recipient_events' => '\DocuSign\eSign\Model\RecipientEvent[]',
        'use_soap_interface' => 'string',
        'soap_name_space' => 'string',
        'include_certificate_with_soap' => 'string',
        'sign_message_with_x509_cert' => 'string',
        'include_documents' => 'string',
        'include_envelope_void_reason' => 'string',
        'include_time_zone' => 'string',
        'include_sender_account_as_custom_field' => 'string',
        'include_document_fields' => 'string',
        'include_certificate_of_completion' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'url' => 'url',
        'logging_enabled' => 'loggingEnabled',
        'require_acknowledgment' => 'requireAcknowledgment',
        'envelope_events' => 'envelopeEvents',
        'recipient_events' => 'recipientEvents',
        'use_soap_interface' => 'useSoapInterface',
        'soap_name_space' => 'soapNameSpace',
        'include_certificate_with_soap' => 'includeCertificateWithSoap',
        'sign_message_with_x509_cert' => 'signMessageWithX509Cert',
        'include_documents' => 'includeDocuments',
        'include_envelope_void_reason' => 'includeEnvelopeVoidReason',
        'include_time_zone' => 'includeTimeZone',
        'include_sender_account_as_custom_field' => 'includeSenderAccountAsCustomField',
        'include_document_fields' => 'includeDocumentFields',
        'include_certificate_of_completion' => 'includeCertificateOfCompletion'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'url' => 'setUrl',
        'logging_enabled' => 'setLoggingEnabled',
        'require_acknowledgment' => 'setRequireAcknowledgment',
        'envelope_events' => 'setEnvelopeEvents',
        'recipient_events' => 'setRecipientEvents',
        'use_soap_interface' => 'setUseSoapInterface',
        'soap_name_space' => 'setSoapNameSpace',
        'include_certificate_with_soap' => 'setIncludeCertificateWithSoap',
        'sign_message_with_x509_cert' => 'setSignMessageWithX509Cert',
        'include_documents' => 'setIncludeDocuments',
        'include_envelope_void_reason' => 'setIncludeEnvelopeVoidReason',
        'include_time_zone' => 'setIncludeTimeZone',
        'include_sender_account_as_custom_field' => 'setIncludeSenderAccountAsCustomField',
        'include_document_fields' => 'setIncludeDocumentFields',
        'include_certificate_of_completion' => 'setIncludeCertificateOfCompletion'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'url' => 'getUrl',
        'logging_enabled' => 'getLoggingEnabled',
        'require_acknowledgment' => 'getRequireAcknowledgment',
        'envelope_events' => 'getEnvelopeEvents',
        'recipient_events' => 'getRecipientEvents',
        'use_soap_interface' => 'getUseSoapInterface',
        'soap_name_space' => 'getSoapNameSpace',
        'include_certificate_with_soap' => 'getIncludeCertificateWithSoap',
        'sign_message_with_x509_cert' => 'getSignMessageWithX509Cert',
        'include_documents' => 'getIncludeDocuments',
        'include_envelope_void_reason' => 'getIncludeEnvelopeVoidReason',
        'include_time_zone' => 'getIncludeTimeZone',
        'include_sender_account_as_custom_field' => 'getIncludeSenderAccountAsCustomField',
        'include_document_fields' => 'getIncludeDocumentFields',
        'include_certificate_of_completion' => 'getIncludeCertificateOfCompletion'
    );
  
    
    /**
      * $url Specifies the endpoint to which envelope updates are sent. Udpates are sent as XML unless `useSoapInterface` property is set to **true**.
      * @var string
      */
    protected $url;
    
    /**
      * $logging_enabled When set to **true**, logging is turned on for envelope events on the Web Console Connect page.
      * @var string
      */
    protected $logging_enabled;
    
    /**
      * $require_acknowledgment When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures.
      * @var string
      */
    protected $require_acknowledgment;
    
    /**
      * $envelope_events A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property. \n\nTo receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
      * @var \DocuSign\eSign\Model\EnvelopeEvent[]
      */
    protected $envelope_events;
    
    /**
      * $recipient_events A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the url property.\n\nTo receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
      * @var \DocuSign\eSign\Model\RecipientEvent[]
      */
    protected $recipient_events;
    
    /**
      * $use_soap_interface When set to **true**, this tells the Connect service that the user's endpoint has implemented a SOAP interface.
      * @var string
      */
    protected $use_soap_interface;
    
    /**
      * $soap_name_space This lists the namespace in the SOAP listener provided.
      * @var string
      */
    protected $soap_name_space;
    
    /**
      * $include_certificate_with_soap When set to **true**, this tells the Connect service to send the DocuSign signedby certificate as part of the outgoing SOAP xml. This appears in the XML as wsse:BinarySecurityToken.
      * @var string
      */
    protected $include_certificate_with_soap;
    
    /**
      * $sign_message_with_x509_cert When set to **true**, messages are signed with an X509 certificate. This provides support for 2-way SSL in the envelope.
      * @var string
      */
    protected $sign_message_with_x509_cert;
    
    /**
      * $include_documents When set to **true**, the PDF documents are included in the message along with the updated XML.
      * @var string
      */
    protected $include_documents;
    
    /**
      * $include_envelope_void_reason When set to **true**, this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message.
      * @var string
      */
    protected $include_envelope_void_reason;
    
    /**
      * $include_time_zone When set to **true**, the envelope time zone information is included in the message.
      * @var string
      */
    protected $include_time_zone;
    
    /**
      * $include_sender_account_as_custom_field When set to **true**, the sender account ID is included as a envelope custom field in the data.
      * @var string
      */
    protected $include_sender_account_as_custom_field;
    
    /**
      * $include_document_fields When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API.
      * @var string
      */
    protected $include_document_fields;
    
    /**
      * $include_certificate_of_completion When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
      * @var string
      */
    protected $include_certificate_of_completion;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->url = $data["url"];
            $this->logging_enabled = $data["logging_enabled"];
            $this->require_acknowledgment = $data["require_acknowledgment"];
            $this->envelope_events = $data["envelope_events"];
            $this->recipient_events = $data["recipient_events"];
            $this->use_soap_interface = $data["use_soap_interface"];
            $this->soap_name_space = $data["soap_name_space"];
            $this->include_certificate_with_soap = $data["include_certificate_with_soap"];
            $this->sign_message_with_x509_cert = $data["sign_message_with_x509_cert"];
            $this->include_documents = $data["include_documents"];
            $this->include_envelope_void_reason = $data["include_envelope_void_reason"];
            $this->include_time_zone = $data["include_time_zone"];
            $this->include_sender_account_as_custom_field = $data["include_sender_account_as_custom_field"];
            $this->include_document_fields = $data["include_document_fields"];
            $this->include_certificate_of_completion = $data["include_certificate_of_completion"];
        }
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url Specifies the endpoint to which envelope updates are sent. Udpates are sent as XML unless `useSoapInterface` property is set to **true**.
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Gets logging_enabled
     * @return string
     */
    public function getLoggingEnabled()
    {
        return $this->logging_enabled;
    }
  
    /**
     * Sets logging_enabled
     * @param string $logging_enabled When set to **true**, logging is turned on for envelope events on the Web Console Connect page.
     * @return $this
     */
    public function setLoggingEnabled($logging_enabled)
    {
        
        $this->logging_enabled = $logging_enabled;
        return $this;
    }
    
    /**
     * Gets require_acknowledgment
     * @return string
     */
    public function getRequireAcknowledgment()
    {
        return $this->require_acknowledgment;
    }
  
    /**
     * Sets require_acknowledgment
     * @param string $require_acknowledgment When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures.
     * @return $this
     */
    public function setRequireAcknowledgment($require_acknowledgment)
    {
        
        $this->require_acknowledgment = $require_acknowledgment;
        return $this;
    }
    
    /**
     * Gets envelope_events
     * @return \DocuSign\eSign\Model\EnvelopeEvent[]
     */
    public function getEnvelopeEvents()
    {
        return $this->envelope_events;
    }
  
    /**
     * Sets envelope_events
     * @param \DocuSign\eSign\Model\EnvelopeEvent[] $envelope_events A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property. \n\nTo receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
     * @return $this
     */
    public function setEnvelopeEvents($envelope_events)
    {
        
        $this->envelope_events = $envelope_events;
        return $this;
    }
    
    /**
     * Gets recipient_events
     * @return \DocuSign\eSign\Model\RecipientEvent[]
     */
    public function getRecipientEvents()
    {
        return $this->recipient_events;
    }
  
    /**
     * Sets recipient_events
     * @param \DocuSign\eSign\Model\RecipientEvent[] $recipient_events A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the url property.\n\nTo receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
     * @return $this
     */
    public function setRecipientEvents($recipient_events)
    {
        
        $this->recipient_events = $recipient_events;
        return $this;
    }
    
    /**
     * Gets use_soap_interface
     * @return string
     */
    public function getUseSoapInterface()
    {
        return $this->use_soap_interface;
    }
  
    /**
     * Sets use_soap_interface
     * @param string $use_soap_interface When set to **true**, this tells the Connect service that the user's endpoint has implemented a SOAP interface.
     * @return $this
     */
    public function setUseSoapInterface($use_soap_interface)
    {
        
        $this->use_soap_interface = $use_soap_interface;
        return $this;
    }
    
    /**
     * Gets soap_name_space
     * @return string
     */
    public function getSoapNameSpace()
    {
        return $this->soap_name_space;
    }
  
    /**
     * Sets soap_name_space
     * @param string $soap_name_space This lists the namespace in the SOAP listener provided.
     * @return $this
     */
    public function setSoapNameSpace($soap_name_space)
    {
        
        $this->soap_name_space = $soap_name_space;
        return $this;
    }
    
    /**
     * Gets include_certificate_with_soap
     * @return string
     */
    public function getIncludeCertificateWithSoap()
    {
        return $this->include_certificate_with_soap;
    }
  
    /**
     * Sets include_certificate_with_soap
     * @param string $include_certificate_with_soap When set to **true**, this tells the Connect service to send the DocuSign signedby certificate as part of the outgoing SOAP xml. This appears in the XML as wsse:BinarySecurityToken.
     * @return $this
     */
    public function setIncludeCertificateWithSoap($include_certificate_with_soap)
    {
        
        $this->include_certificate_with_soap = $include_certificate_with_soap;
        return $this;
    }
    
    /**
     * Gets sign_message_with_x509_cert
     * @return string
     */
    public function getSignMessageWithX509Cert()
    {
        return $this->sign_message_with_x509_cert;
    }
  
    /**
     * Sets sign_message_with_x509_cert
     * @param string $sign_message_with_x509_cert When set to **true**, messages are signed with an X509 certificate. This provides support for 2-way SSL in the envelope.
     * @return $this
     */
    public function setSignMessageWithX509Cert($sign_message_with_x509_cert)
    {
        
        $this->sign_message_with_x509_cert = $sign_message_with_x509_cert;
        return $this;
    }
    
    /**
     * Gets include_documents
     * @return string
     */
    public function getIncludeDocuments()
    {
        return $this->include_documents;
    }
  
    /**
     * Sets include_documents
     * @param string $include_documents When set to **true**, the PDF documents are included in the message along with the updated XML.
     * @return $this
     */
    public function setIncludeDocuments($include_documents)
    {
        
        $this->include_documents = $include_documents;
        return $this;
    }
    
    /**
     * Gets include_envelope_void_reason
     * @return string
     */
    public function getIncludeEnvelopeVoidReason()
    {
        return $this->include_envelope_void_reason;
    }
  
    /**
     * Sets include_envelope_void_reason
     * @param string $include_envelope_void_reason When set to **true**, this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message.
     * @return $this
     */
    public function setIncludeEnvelopeVoidReason($include_envelope_void_reason)
    {
        
        $this->include_envelope_void_reason = $include_envelope_void_reason;
        return $this;
    }
    
    /**
     * Gets include_time_zone
     * @return string
     */
    public function getIncludeTimeZone()
    {
        return $this->include_time_zone;
    }
  
    /**
     * Sets include_time_zone
     * @param string $include_time_zone When set to **true**, the envelope time zone information is included in the message.
     * @return $this
     */
    public function setIncludeTimeZone($include_time_zone)
    {
        
        $this->include_time_zone = $include_time_zone;
        return $this;
    }
    
    /**
     * Gets include_sender_account_as_custom_field
     * @return string
     */
    public function getIncludeSenderAccountAsCustomField()
    {
        return $this->include_sender_account_as_custom_field;
    }
  
    /**
     * Sets include_sender_account_as_custom_field
     * @param string $include_sender_account_as_custom_field When set to **true**, the sender account ID is included as a envelope custom field in the data.
     * @return $this
     */
    public function setIncludeSenderAccountAsCustomField($include_sender_account_as_custom_field)
    {
        
        $this->include_sender_account_as_custom_field = $include_sender_account_as_custom_field;
        return $this;
    }
    
    /**
     * Gets include_document_fields
     * @return string
     */
    public function getIncludeDocumentFields()
    {
        return $this->include_document_fields;
    }
  
    /**
     * Sets include_document_fields
     * @param string $include_document_fields When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API.
     * @return $this
     */
    public function setIncludeDocumentFields($include_document_fields)
    {
        
        $this->include_document_fields = $include_document_fields;
        return $this;
    }
    
    /**
     * Gets include_certificate_of_completion
     * @return string
     */
    public function getIncludeCertificateOfCompletion()
    {
        return $this->include_certificate_of_completion;
    }
  
    /**
     * Sets include_certificate_of_completion
     * @param string $include_certificate_of_completion When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.
     * @return $this
     */
    public function setIncludeCertificateOfCompletion($include_certificate_of_completion)
    {
        
        $this->include_certificate_of_completion = $include_certificate_of_completion;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
