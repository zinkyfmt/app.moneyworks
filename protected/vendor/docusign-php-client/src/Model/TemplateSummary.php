<?php
/**
 * TemplateSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * TemplateSummary Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TemplateSummary implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'template_id' => 'string',
        'name' => 'string',
        'document_id' => 'string',
        'document_name' => 'string',
        'applied' => 'string',
        'template_match' => '\DocuSign\eSign\Model\TemplateMatch',
        'uri' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'template_id' => 'templateId',
        'name' => 'name',
        'document_id' => 'documentId',
        'document_name' => 'documentName',
        'applied' => 'applied',
        'template_match' => 'templateMatch',
        'uri' => 'uri'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'template_id' => 'setTemplateId',
        'name' => 'setName',
        'document_id' => 'setDocumentId',
        'document_name' => 'setDocumentName',
        'applied' => 'setApplied',
        'template_match' => 'setTemplateMatch',
        'uri' => 'setUri'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'template_id' => 'getTemplateId',
        'name' => 'getName',
        'document_id' => 'getDocumentId',
        'document_name' => 'getDocumentName',
        'applied' => 'getApplied',
        'template_match' => 'getTemplateMatch',
        'uri' => 'getUri'
    );
  
    
    /**
      * $template_id The unique identifier of the template. If this is not provided, DocuSign will generate a value.
      * @var string
      */
    protected $template_id;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $document_id Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
      * @var string
      */
    protected $document_id;
    
    /**
      * $document_name 
      * @var string
      */
    protected $document_name;
    
    /**
      * $applied Reserved: TBD
      * @var string
      */
    protected $applied;
    
    /**
      * $template_match 
      * @var \DocuSign\eSign\Model\TemplateMatch
      */
    protected $template_match;
    
    /**
      * $uri 
      * @var string
      */
    protected $uri;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->template_id = $data["template_id"];
            $this->name = $data["name"];
            $this->document_id = $data["document_id"];
            $this->document_name = $data["document_name"];
            $this->applied = $data["applied"];
            $this->template_match = $data["template_match"];
            $this->uri = $data["uri"];
        }
    }
    
    /**
     * Gets template_id
     * @return string
     */
    public function getTemplateId()
    {
        return $this->template_id;
    }
  
    /**
     * Sets template_id
     * @param string $template_id The unique identifier of the template. If this is not provided, DocuSign will generate a value.
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        
        $this->template_id = $template_id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets document_id
     * @return string
     */
    public function getDocumentId()
    {
        return $this->document_id;
    }
  
    /**
     * Sets document_id
     * @param string $document_id Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        
        $this->document_id = $document_id;
        return $this;
    }
    
    /**
     * Gets document_name
     * @return string
     */
    public function getDocumentName()
    {
        return $this->document_name;
    }
  
    /**
     * Sets document_name
     * @param string $document_name 
     * @return $this
     */
    public function setDocumentName($document_name)
    {
        
        $this->document_name = $document_name;
        return $this;
    }
    
    /**
     * Gets applied
     * @return string
     */
    public function getApplied()
    {
        return $this->applied;
    }
  
    /**
     * Sets applied
     * @param string $applied Reserved: TBD
     * @return $this
     */
    public function setApplied($applied)
    {
        
        $this->applied = $applied;
        return $this;
    }
    
    /**
     * Gets template_match
     * @return \DocuSign\eSign\Model\TemplateMatch
     */
    public function getTemplateMatch()
    {
        return $this->template_match;
    }
  
    /**
     * Sets template_match
     * @param \DocuSign\eSign\Model\TemplateMatch $template_match 
     * @return $this
     */
    public function setTemplateMatch($template_match)
    {
        
        $this->template_match = $template_match;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri 
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
