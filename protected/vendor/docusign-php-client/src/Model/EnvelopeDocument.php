<?php
/**
 * EnvelopeDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * EnvelopeDocument Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EnvelopeDocument implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'document_id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'uri' => 'string',
        'order' => 'string',
        'pages' => 'string',
        'contains_pdf_form_fields' => 'string',
        'available_document_types' => '\DocuSign\eSign\Model\SignatureType[]',
        'error_details' => '\DocuSign\eSign\Model\ErrorDetails'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'document_id' => 'documentId',
        'name' => 'name',
        'type' => 'type',
        'uri' => 'uri',
        'order' => 'order',
        'pages' => 'pages',
        'contains_pdf_form_fields' => 'containsPdfFormFields',
        'available_document_types' => 'availableDocumentTypes',
        'error_details' => 'errorDetails'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'document_id' => 'setDocumentId',
        'name' => 'setName',
        'type' => 'setType',
        'uri' => 'setUri',
        'order' => 'setOrder',
        'pages' => 'setPages',
        'contains_pdf_form_fields' => 'setContainsPdfFormFields',
        'available_document_types' => 'setAvailableDocumentTypes',
        'error_details' => 'setErrorDetails'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'document_id' => 'getDocumentId',
        'name' => 'getName',
        'type' => 'getType',
        'uri' => 'getUri',
        'order' => 'getOrder',
        'pages' => 'getPages',
        'contains_pdf_form_fields' => 'getContainsPdfFormFields',
        'available_document_types' => 'getAvailableDocumentTypes',
        'error_details' => 'getErrorDetails'
    );
  
    
    /**
      * $document_id Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
      * @var string
      */
    protected $document_id;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    
    /**
      * $uri 
      * @var string
      */
    protected $uri;
    
    /**
      * $order 
      * @var string
      */
    protected $order;
    
    /**
      * $pages 
      * @var string
      */
    protected $pages;
    
    /**
      * $contains_pdf_form_fields 
      * @var string
      */
    protected $contains_pdf_form_fields;
    
    /**
      * $available_document_types 
      * @var \DocuSign\eSign\Model\SignatureType[]
      */
    protected $available_document_types;
    
    /**
      * $error_details 
      * @var \DocuSign\eSign\Model\ErrorDetails
      */
    protected $error_details;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->document_id = $data["document_id"];
            $this->name = $data["name"];
            $this->type = $data["type"];
            $this->uri = $data["uri"];
            $this->order = $data["order"];
            $this->pages = $data["pages"];
            $this->contains_pdf_form_fields = $data["contains_pdf_form_fields"];
            $this->available_document_types = $data["available_document_types"];
            $this->error_details = $data["error_details"];
        }
    }
    
    /**
     * Gets document_id
     * @return string
     */
    public function getDocumentId()
    {
        return $this->document_id;
    }
  
    /**
     * Sets document_id
     * @param string $document_id Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        
        $this->document_id = $document_id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri 
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Gets order
     * @return string
     */
    public function getOrder()
    {
        return $this->order;
    }
  
    /**
     * Sets order
     * @param string $order 
     * @return $this
     */
    public function setOrder($order)
    {
        
        $this->order = $order;
        return $this;
    }
    
    /**
     * Gets pages
     * @return string
     */
    public function getPages()
    {
        return $this->pages;
    }
  
    /**
     * Sets pages
     * @param string $pages 
     * @return $this
     */
    public function setPages($pages)
    {
        
        $this->pages = $pages;
        return $this;
    }
    
    /**
     * Gets contains_pdf_form_fields
     * @return string
     */
    public function getContainsPdfFormFields()
    {
        return $this->contains_pdf_form_fields;
    }
  
    /**
     * Sets contains_pdf_form_fields
     * @param string $contains_pdf_form_fields 
     * @return $this
     */
    public function setContainsPdfFormFields($contains_pdf_form_fields)
    {
        
        $this->contains_pdf_form_fields = $contains_pdf_form_fields;
        return $this;
    }
    
    /**
     * Gets available_document_types
     * @return \DocuSign\eSign\Model\SignatureType[]
     */
    public function getAvailableDocumentTypes()
    {
        return $this->available_document_types;
    }
  
    /**
     * Sets available_document_types
     * @param \DocuSign\eSign\Model\SignatureType[] $available_document_types 
     * @return $this
     */
    public function setAvailableDocumentTypes($available_document_types)
    {
        
        $this->available_document_types = $available_document_types;
        return $this;
    }
    
    /**
     * Gets error_details
     * @return \DocuSign\eSign\Model\ErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->error_details;
    }
  
    /**
     * Sets error_details
     * @param \DocuSign\eSign\Model\ErrorDetails $error_details 
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        
        $this->error_details = $error_details;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
