<?php
/**
 * Folder
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * Folder Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Folder implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'owner_user_name' => 'string',
        'owner_email' => 'string',
        'owner_user_id' => 'string',
        'type' => 'string',
        'name' => 'string',
        'uri' => 'string',
        'parent_folder_id' => 'string',
        'parent_folder_uri' => 'string',
        'folder_id' => 'string',
        'error_details' => '\DocuSign\eSign\Model\ErrorDetails',
        'folders' => '\DocuSign\eSign\Model\Folder[]',
        'filter' => '\DocuSign\eSign\Model\Filter'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'owner_user_name' => 'ownerUserName',
        'owner_email' => 'ownerEmail',
        'owner_user_id' => 'ownerUserId',
        'type' => 'type',
        'name' => 'name',
        'uri' => 'uri',
        'parent_folder_id' => 'parentFolderId',
        'parent_folder_uri' => 'parentFolderUri',
        'folder_id' => 'folderId',
        'error_details' => 'errorDetails',
        'folders' => 'folders',
        'filter' => 'filter'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'owner_user_name' => 'setOwnerUserName',
        'owner_email' => 'setOwnerEmail',
        'owner_user_id' => 'setOwnerUserId',
        'type' => 'setType',
        'name' => 'setName',
        'uri' => 'setUri',
        'parent_folder_id' => 'setParentFolderId',
        'parent_folder_uri' => 'setParentFolderUri',
        'folder_id' => 'setFolderId',
        'error_details' => 'setErrorDetails',
        'folders' => 'setFolders',
        'filter' => 'setFilter'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'owner_user_name' => 'getOwnerUserName',
        'owner_email' => 'getOwnerEmail',
        'owner_user_id' => 'getOwnerUserId',
        'type' => 'getType',
        'name' => 'getName',
        'uri' => 'getUri',
        'parent_folder_id' => 'getParentFolderId',
        'parent_folder_uri' => 'getParentFolderUri',
        'folder_id' => 'getFolderId',
        'error_details' => 'getErrorDetails',
        'folders' => 'getFolders',
        'filter' => 'getFilter'
    );
  
    
    /**
      * $owner_user_name 
      * @var string
      */
    protected $owner_user_name;
    
    /**
      * $owner_email 
      * @var string
      */
    protected $owner_email;
    
    /**
      * $owner_user_id 
      * @var string
      */
    protected $owner_user_id;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $uri 
      * @var string
      */
    protected $uri;
    
    /**
      * $parent_folder_id 
      * @var string
      */
    protected $parent_folder_id;
    
    /**
      * $parent_folder_uri 
      * @var string
      */
    protected $parent_folder_uri;
    
    /**
      * $folder_id 
      * @var string
      */
    protected $folder_id;
    
    /**
      * $error_details 
      * @var \DocuSign\eSign\Model\ErrorDetails
      */
    protected $error_details;
    
    /**
      * $folders A collection of folder objects returned in a response.
      * @var \DocuSign\eSign\Model\Folder[]
      */
    protected $folders;
    
    /**
      * $filter 
      * @var \DocuSign\eSign\Model\Filter
      */
    protected $filter;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->owner_user_name = $data["owner_user_name"];
            $this->owner_email = $data["owner_email"];
            $this->owner_user_id = $data["owner_user_id"];
            $this->type = $data["type"];
            $this->name = $data["name"];
            $this->uri = $data["uri"];
            $this->parent_folder_id = $data["parent_folder_id"];
            $this->parent_folder_uri = $data["parent_folder_uri"];
            $this->folder_id = $data["folder_id"];
            $this->error_details = $data["error_details"];
            $this->folders = $data["folders"];
            $this->filter = $data["filter"];
        }
    }
    
    /**
     * Gets owner_user_name
     * @return string
     */
    public function getOwnerUserName()
    {
        return $this->owner_user_name;
    }
  
    /**
     * Sets owner_user_name
     * @param string $owner_user_name 
     * @return $this
     */
    public function setOwnerUserName($owner_user_name)
    {
        
        $this->owner_user_name = $owner_user_name;
        return $this;
    }
    
    /**
     * Gets owner_email
     * @return string
     */
    public function getOwnerEmail()
    {
        return $this->owner_email;
    }
  
    /**
     * Sets owner_email
     * @param string $owner_email 
     * @return $this
     */
    public function setOwnerEmail($owner_email)
    {
        
        $this->owner_email = $owner_email;
        return $this;
    }
    
    /**
     * Gets owner_user_id
     * @return string
     */
    public function getOwnerUserId()
    {
        return $this->owner_user_id;
    }
  
    /**
     * Sets owner_user_id
     * @param string $owner_user_id 
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        
        $this->owner_user_id = $owner_user_id;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri 
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Gets parent_folder_id
     * @return string
     */
    public function getParentFolderId()
    {
        return $this->parent_folder_id;
    }
  
    /**
     * Sets parent_folder_id
     * @param string $parent_folder_id 
     * @return $this
     */
    public function setParentFolderId($parent_folder_id)
    {
        
        $this->parent_folder_id = $parent_folder_id;
        return $this;
    }
    
    /**
     * Gets parent_folder_uri
     * @return string
     */
    public function getParentFolderUri()
    {
        return $this->parent_folder_uri;
    }
  
    /**
     * Sets parent_folder_uri
     * @param string $parent_folder_uri 
     * @return $this
     */
    public function setParentFolderUri($parent_folder_uri)
    {
        
        $this->parent_folder_uri = $parent_folder_uri;
        return $this;
    }
    
    /**
     * Gets folder_id
     * @return string
     */
    public function getFolderId()
    {
        return $this->folder_id;
    }
  
    /**
     * Sets folder_id
     * @param string $folder_id 
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        
        $this->folder_id = $folder_id;
        return $this;
    }
    
    /**
     * Gets error_details
     * @return \DocuSign\eSign\Model\ErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->error_details;
    }
  
    /**
     * Sets error_details
     * @param \DocuSign\eSign\Model\ErrorDetails $error_details 
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        
        $this->error_details = $error_details;
        return $this;
    }
    
    /**
     * Gets folders
     * @return \DocuSign\eSign\Model\Folder[]
     */
    public function getFolders()
    {
        return $this->folders;
    }
  
    /**
     * Sets folders
     * @param \DocuSign\eSign\Model\Folder[] $folders A collection of folder objects returned in a response.
     * @return $this
     */
    public function setFolders($folders)
    {
        
        $this->folders = $folders;
        return $this;
    }
    
    /**
     * Gets filter
     * @return \DocuSign\eSign\Model\Filter
     */
    public function getFilter()
    {
        return $this->filter;
    }
  
    /**
     * Sets filter
     * @param \DocuSign\eSign\Model\Filter $filter 
     * @return $this
     */
    public function setFilter($filter)
    {
        
        $this->filter = $filter;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
