<?php
/**
 * EnvelopesApi
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */


namespace DocuSign\eSign\Api\EnvelopesApi;

class ListStatusChangesOptions
{
        
    /**
      * $ac_status Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed.
      * @var string
      */
    protected $ac_status;

    /**
     * Gets ac_status
     * @return string
     */
    public function getAcStatus()
    {
        return $this->ac_status;
    }
  
    /**
     * Sets ac_status
     * @param string $ac_status Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed.
     * @return $this
     */
    public function setAcStatus($ac_status)
    {
        $this->ac_status = $ac_status;
        return $this;
    }
        
    /**
      * $block 
      * @var string
      */
    protected $block;

    /**
     * Gets block
     * @return string
     */
    public function getBlock()
    {
        return $this->block;
    }
  
    /**
     * Sets block
     * @param string $block 
     * @return $this
     */
    public function setBlock($block)
    {
        $this->block = $block;
        return $this;
    }
        
    /**
      * $count 
      * @var string
      */
    protected $count;

    /**
     * Gets count
     * @return string
     */
    public function getCount()
    {
        return $this->count;
    }
  
    /**
     * Sets count
     * @param string $count 
     * @return $this
     */
    public function setCount($count)
    {
        $this->count = $count;
        return $this;
    }
        
    /**
      * $custom_field This specifies the envelope custom field name and value searched for in the envelope information. The value portion of the query can use partial strings by adding '%' (percent sign) around the custom field query value. \n\nExample 1: If you have an envelope custom field called \"Region\" and you want to search for all envelopes where the value is \"West\" you would use the query: `?custom_field=Region=West`. \n\nExample 2: To search for envelopes where the `ApplicationID` custom field has the value or partial value of \"DocuSign\" in field, the query would be: `?custom_field=ApplicationId=%DocuSign%` This would find envelopes where the custom field value is \"DocuSign for Salesforce\" or \"DocuSign envelope.\"
      * @var string
      */
    protected $custom_field;

    /**
     * Gets custom_field
     * @return string
     */
    public function getCustomField()
    {
        return $this->custom_field;
    }
  
    /**
     * Sets custom_field
     * @param string $custom_field This specifies the envelope custom field name and value searched for in the envelope information. The value portion of the query can use partial strings by adding '%' (percent sign) around the custom field query value. \n\nExample 1: If you have an envelope custom field called \"Region\" and you want to search for all envelopes where the value is \"West\" you would use the query: `?custom_field=Region=West`. \n\nExample 2: To search for envelopes where the `ApplicationID` custom field has the value or partial value of \"DocuSign\" in field, the query would be: `?custom_field=ApplicationId=%DocuSign%` This would find envelopes where the custom field value is \"DocuSign for Salesforce\" or \"DocuSign envelope.\"
     * @return $this
     */
    public function setCustomField($custom_field)
    {
        $this->custom_field = $custom_field;
        return $this;
    }
        
    /**
      * $email 
      * @var string
      */
    protected $email;

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        $this->email = $email;
        return $this;
    }
        
    /**
      * $envelope_ids 
      * @var string
      */
    protected $envelope_ids;

    /**
     * Gets envelope_ids
     * @return string
     */
    public function getEnvelopeIds()
    {
        return $this->envelope_ids;
    }
  
    /**
     * Sets envelope_ids
     * @param string $envelope_ids 
     * @return $this
     */
    public function setEnvelopeIds($envelope_ids)
    {
        $this->envelope_ids = $envelope_ids;
        return $this;
    }
        
    /**
      * $exclude 
      * @var string
      */
    protected $exclude;

    /**
     * Gets exclude
     * @return string
     */
    public function getExclude()
    {
        return $this->exclude;
    }
  
    /**
     * Sets exclude
     * @param string $exclude 
     * @return $this
     */
    public function setExclude($exclude)
    {
        $this->exclude = $exclude;
        return $this;
    }
        
    /**
      * $folder_ids 
      * @var string
      */
    protected $folder_ids;

    /**
     * Gets folder_ids
     * @return string
     */
    public function getFolderIds()
    {
        return $this->folder_ids;
    }
  
    /**
     * Sets folder_ids
     * @param string $folder_ids 
     * @return $this
     */
    public function setFolderIds($folder_ids)
    {
        $this->folder_ids = $folder_ids;
        return $this;
    }
        
    /**
      * $folder_types 
      * @var string
      */
    protected $folder_types;

    /**
     * Gets folder_types
     * @return string
     */
    public function getFolderTypes()
    {
        return $this->folder_types;
    }
  
    /**
     * Sets folder_types
     * @param string $folder_types 
     * @return $this
     */
    public function setFolderTypes($folder_types)
    {
        $this->folder_types = $folder_types;
        return $this;
    }
        
    /**
      * $from_date The date/time setting that specifies the date/time when the request begins checking for status changes for envelopes in the account.\n\nThis is required unless 'envelopeId's are used.
      * @var string
      */
    protected $from_date;

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->from_date;
    }
  
    /**
     * Sets from_date
     * @param string $from_date The date/time setting that specifies the date/time when the request begins checking for status changes for envelopes in the account.\n\nThis is required unless 'envelopeId's are used.
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->from_date = $from_date;
        return $this;
    }
        
    /**
      * $from_to_status This is the status type checked for in the `from_date`/`to_date` period. If `changed` is specified, then envelopes that changed status during the period are found. If for example, `created` is specified, then envelopes created during the period are found. Default is `changed`. \n\nPossible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
      * @var string
      */
    protected $from_to_status;

    /**
     * Gets from_to_status
     * @return string
     */
    public function getFromToStatus()
    {
        return $this->from_to_status;
    }
  
    /**
     * Sets from_to_status
     * @param string $from_to_status This is the status type checked for in the `from_date`/`to_date` period. If `changed` is specified, then envelopes that changed status during the period are found. If for example, `created` is specified, then envelopes created during the period are found. Default is `changed`. \n\nPossible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
     * @return $this
     */
    public function setFromToStatus($from_to_status)
    {
        $this->from_to_status = $from_to_status;
        return $this;
    }
        
    /**
      * $_include 
      * @var string
      */
    protected $_include;

    /**
     * Gets _include
     * @return string
     */
    public function getInclude()
    {
        return $this->_include;
    }
  
    /**
     * Sets _include
     * @param string $_include 
     * @return $this
     */
    public function setInclude($_include)
    {
        $this->_include = $_include;
        return $this;
    }
        
    /**
      * $intersecting_folder_ids 
      * @var string
      */
    protected $intersecting_folder_ids;

    /**
     * Gets intersecting_folder_ids
     * @return string
     */
    public function getIntersectingFolderIds()
    {
        return $this->intersecting_folder_ids;
    }
  
    /**
     * Sets intersecting_folder_ids
     * @param string $intersecting_folder_ids 
     * @return $this
     */
    public function setIntersectingFolderIds($intersecting_folder_ids)
    {
        $this->intersecting_folder_ids = $intersecting_folder_ids;
        return $this;
    }
        
    /**
      * $order 
      * @var string
      */
    protected $order;

    /**
     * Gets order
     * @return string
     */
    public function getOrder()
    {
        return $this->order;
    }
  
    /**
     * Sets order
     * @param string $order 
     * @return $this
     */
    public function setOrder($order)
    {
        $this->order = $order;
        return $this;
    }
        
    /**
      * $order_by 
      * @var string
      */
    protected $order_by;

    /**
     * Gets order_by
     * @return string
     */
    public function getOrderBy()
    {
        return $this->order_by;
    }
  
    /**
     * Sets order_by
     * @param string $order_by 
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->order_by = $order_by;
        return $this;
    }
        
    /**
      * $powerformids 
      * @var string
      */
    protected $powerformids;

    /**
     * Gets powerformids
     * @return string
     */
    public function getPowerformids()
    {
        return $this->powerformids;
    }
  
    /**
     * Sets powerformids
     * @param string $powerformids 
     * @return $this
     */
    public function setPowerformids($powerformids)
    {
        $this->powerformids = $powerformids;
        return $this;
    }
        
    /**
      * $search_text 
      * @var string
      */
    protected $search_text;

    /**
     * Gets search_text
     * @return string
     */
    public function getSearchText()
    {
        return $this->search_text;
    }
  
    /**
     * Sets search_text
     * @param string $search_text 
     * @return $this
     */
    public function setSearchText($search_text)
    {
        $this->search_text = $search_text;
        return $this;
    }
        
    /**
      * $start_position 
      * @var string
      */
    protected $start_position;

    /**
     * Gets start_position
     * @return string
     */
    public function getStartPosition()
    {
        return $this->start_position;
    }
  
    /**
     * Sets start_position
     * @param string $start_position 
     * @return $this
     */
    public function setStartPosition($start_position)
    {
        $this->start_position = $start_position;
        return $this;
    }
        
    /**
      * $status The list of current statuses to include in the response. By default, all envelopes found are returned. If values are specified, then of the envelopes found, only those with the current status specified are returned in the results. \n\nPossible values are: Voided, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
      * @var string
      */
    protected $status;

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status The list of current statuses to include in the response. By default, all envelopes found are returned. If values are specified, then of the envelopes found, only those with the current status specified are returned in the results. \n\nPossible values are: Voided, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }
        
    /**
      * $to_date Optional date/time setting that specifies the date/time when the request stops for status changes for envelopes in the account. If no entry, the system uses the time of the call as the `to_date`.
      * @var string
      */
    protected $to_date;

    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->to_date;
    }
  
    /**
     * Sets to_date
     * @param string $to_date Optional date/time setting that specifies the date/time when the request stops for status changes for envelopes in the account. If no entry, the system uses the time of the call as the `to_date`.
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->to_date = $to_date;
        return $this;
    }
        
    /**
      * $transaction_ids If included in the query string, this is a comma separated list of envelope `transactionId`s. \n\nIf included in the `request_body`, this is a list of envelope `transactionId`s. \n\n#### Note: `transactionId`s are only valid in the DocuSign system for seven days.
      * @var string
      */
    protected $transaction_ids;

    /**
     * Gets transaction_ids
     * @return string
     */
    public function getTransactionIds()
    {
        return $this->transaction_ids;
    }
  
    /**
     * Sets transaction_ids
     * @param string $transaction_ids If included in the query string, this is a comma separated list of envelope `transactionId`s. \n\nIf included in the `request_body`, this is a list of envelope `transactionId`s. \n\n#### Note: `transactionId`s are only valid in the DocuSign system for seven days.
     * @return $this
     */
    public function setTransactionIds($transaction_ids)
    {
        $this->transaction_ids = $transaction_ids;
        return $this;
    }
        
    /**
      * $user_filter 
      * @var string
      */
    protected $user_filter;

    /**
     * Gets user_filter
     * @return string
     */
    public function getUserFilter()
    {
        return $this->user_filter;
    }
  
    /**
     * Sets user_filter
     * @param string $user_filter 
     * @return $this
     */
    public function setUserFilter($user_filter)
    {
        $this->user_filter = $user_filter;
        return $this;
    }
        
    /**
      * $user_id 
      * @var string
      */
    protected $user_id;

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->user_id;
    }
  
    /**
     * Sets user_id
     * @param string $user_id 
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->user_id = $user_id;
        return $this;
    }
        
    /**
      * $user_name 
      * @var string
      */
    protected $user_name;

    /**
     * Gets user_name
     * @return string
     */
    public function getUserName()
    {
        return $this->user_name;
    }
  
    /**
     * Sets user_name
     * @param string $user_name 
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->user_name = $user_name;
        return $this;
    }
    
}
class CreateEnvelopeOptions
{
        
    /**
      * $merge_roles_on_draft When set to **true**, merges template roles and remove empty recipients when you create an envelope with multiple templates.
      * @var string
      */
    protected $merge_roles_on_draft;

    /**
     * Gets merge_roles_on_draft
     * @return string
     */
    public function getMergeRolesOnDraft()
    {
        return $this->merge_roles_on_draft;
    }
  
    /**
     * Sets merge_roles_on_draft
     * @param string $merge_roles_on_draft When set to **true**, merges template roles and remove empty recipients when you create an envelope with multiple templates.
     * @return $this
     */
    public function setMergeRolesOnDraft($merge_roles_on_draft)
    {
        $this->merge_roles_on_draft = $merge_roles_on_draft;
        return $this;
    }
        
    /**
      * $cdse_mode 
      * @var string
      */
    protected $cdse_mode;

    /**
     * Gets cdse_mode
     * @return string
     */
    public function getCdseMode()
    {
        return $this->cdse_mode;
    }
  
    /**
     * Sets cdse_mode
     * @param string $cdse_mode 
     * @return $this
     */
    public function setCdseMode($cdse_mode)
    {
        $this->cdse_mode = $cdse_mode;
        return $this;
    }
    
}
class GetEnvelopeOptions
{
        
    /**
      * $_include 
      * @var string
      */
    protected $_include;

    /**
     * Gets _include
     * @return string
     */
    public function getInclude()
    {
        return $this->_include;
    }
  
    /**
     * Sets _include
     * @param string $_include 
     * @return $this
     */
    public function setInclude($_include)
    {
        $this->_include = $_include;
        return $this;
    }
    
}
class UpdateOptions
{
        
    /**
      * $resend_envelope When set to **true**, sends the specified envelope again.
      * @var string
      */
    protected $resend_envelope;

    /**
     * Gets resend_envelope
     * @return string
     */
    public function getResendEnvelope()
    {
        return $this->resend_envelope;
    }
  
    /**
     * Sets resend_envelope
     * @param string $resend_envelope When set to **true**, sends the specified envelope again.
     * @return $this
     */
    public function setResendEnvelope($resend_envelope)
    {
        $this->resend_envelope = $resend_envelope;
        return $this;
    }
    
}


namespace DocuSign\eSign\Api;

use \DocuSign\eSign\Configuration;
use \DocuSign\eSign\ApiClient;
use \DocuSign\eSign\ApiException;
use \DocuSign\eSign\ObjectSerializer;

/**
 * EnvelopesApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvelopesApi
{

    /**
     * API Client
     * @var \DocuSign\eSign\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \DocuSign\eSign\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://www.docusign.net/restapi');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \DocuSign\eSign\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \DocuSign\eSign\ApiClient $apiClient set the API client
     * @return EnvelopesApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    
    /**
     * listStatusChanges
     *
     * Gets status changes for one or more envelopes.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return \DocuSign\eSign\Model\EnvelopesInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listStatusChanges($account_id, EnvelopesApi\ListStatusChangesOptions $options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listStatusChangesWithHttpInfo ($account_id, $options);
        return $response; 
    }


    /**
     * listStatusChangesWithHttpInfo
     *
     * Gets status changes for one or more envelopes.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return Array of \DocuSign\eSign\Model\EnvelopesInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listStatusChangesWithHttpInfo($account_id, EnvelopesApi\ListStatusChangesOptions $options = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listStatusChanges');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        if ($options != null)
        {
        // query params
        
        
        if ($options->getAcStatus() !== null) {
            $queryParams['ac_status'] = $this->apiClient->getSerializer()->toQueryValue($options->getAcStatus());
        }
        
        if ($options->getBlock() !== null) {
            $queryParams['block'] = $this->apiClient->getSerializer()->toQueryValue($options->getBlock());
        }
        
        if ($options->getCount() !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($options->getCount());
        }
        
        if ($options->getCustomField() !== null) {
            $queryParams['custom_field'] = $this->apiClient->getSerializer()->toQueryValue($options->getCustomField());
        }
        
        if ($options->getEmail() !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($options->getEmail());
        }
        
        if ($options->getEnvelopeIds() !== null) {
            $queryParams['envelope_ids'] = $this->apiClient->getSerializer()->toQueryValue($options->getEnvelopeIds());
        }
        
        if ($options->getExclude() !== null) {
            $queryParams['exclude'] = $this->apiClient->getSerializer()->toQueryValue($options->getExclude());
        }
        
        if ($options->getFolderIds() !== null) {
            $queryParams['folder_ids'] = $this->apiClient->getSerializer()->toQueryValue($options->getFolderIds());
        }
        
        if ($options->getFolderTypes() !== null) {
            $queryParams['folder_types'] = $this->apiClient->getSerializer()->toQueryValue($options->getFolderTypes());
        }
        
        if ($options->getFromDate() !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getFromDate());
        }
        
        if ($options->getFromToStatus() !== null) {
            $queryParams['from_to_status'] = $this->apiClient->getSerializer()->toQueryValue($options->getFromToStatus());
        }
        
        if ($options->getInclude() !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($options->getInclude());
        }
        
        if ($options->getIntersectingFolderIds() !== null) {
            $queryParams['intersecting_folder_ids'] = $this->apiClient->getSerializer()->toQueryValue($options->getIntersectingFolderIds());
        }
        
        if ($options->getOrder() !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($options->getOrder());
        }
        
        if ($options->getOrderBy() !== null) {
            $queryParams['order_by'] = $this->apiClient->getSerializer()->toQueryValue($options->getOrderBy());
        }
        
        if ($options->getPowerformids() !== null) {
            $queryParams['powerformids'] = $this->apiClient->getSerializer()->toQueryValue($options->getPowerformids());
        }
        
        if ($options->getSearchText() !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($options->getSearchText());
        }
        
        if ($options->getStartPosition() !== null) {
            $queryParams['start_position'] = $this->apiClient->getSerializer()->toQueryValue($options->getStartPosition());
        }
        
        if ($options->getStatus() !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
        }
        
        if ($options->getToDate() !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getToDate());
        }
        
        if ($options->getTransactionIds() !== null) {
            $queryParams['transaction_ids'] = $this->apiClient->getSerializer()->toQueryValue($options->getTransactionIds());
        }
        
        if ($options->getUserFilter() !== null) {
            $queryParams['user_filter'] = $this->apiClient->getSerializer()->toQueryValue($options->getUserFilter());
        }
        
        if ($options->getUserId() !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getUserId());
        }
        
        if ($options->getUserName() !== null) {
            $queryParams['user_name'] = $this->apiClient->getSerializer()->toQueryValue($options->getUserName());
        }
        }
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopesInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopesInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopesInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createEnvelope
     *
     * Creates an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return \DocuSign\eSign\Model\EnvelopeSummary
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createEnvelope($account_id, $envelope_definition = null, EnvelopesApi\CreateEnvelopeOptions $options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createEnvelopeWithHttpInfo ($account_id, $envelope_definition, $options);
        return $response; 
    }


    /**
     * createEnvelopeWithHttpInfo
     *
     * Creates an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return Array of \DocuSign\eSign\Model\EnvelopeSummary, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createEnvelopeWithHttpInfo($account_id, $envelope_definition = null, EnvelopesApi\CreateEnvelopeOptions $options = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createEnvelope');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        if ($options != null)
        {
        // query params
        
        
        if ($options->getMergeRolesOnDraft() !== null) {
            $queryParams['merge_roles_on_draft'] = $this->apiClient->getSerializer()->toQueryValue($options->getMergeRolesOnDraft());
        }
        
        if ($options->getCdseMode() !== null) {
            $queryParams['cdse_mode'] = $this->apiClient->getSerializer()->toQueryValue($options->getCdseMode());
        }
        }
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_definition)) {
            $_tempBody = $envelope_definition;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeSummary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeSummary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeSummary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listStatus
     *
     * Gets the envelope status for the specified envelopes.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\EnvelopeIdsRequest $envelope_ids_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\EnvelopesInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listStatus($account_id, $envelope_ids_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listStatusWithHttpInfo ($account_id, $envelope_ids_request);
        return $response; 
    }


    /**
     * listStatusWithHttpInfo
     *
     * Gets the envelope status for the specified envelopes.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\EnvelopeIdsRequest $envelope_ids_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\EnvelopesInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listStatusWithHttpInfo($account_id, $envelope_ids_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listStatus');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_ids_request)) {
            $_tempBody = $envelope_ids_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopesInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopesInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopesInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getEnvelope
     *
     * Gets the status of a envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return \DocuSign\eSign\Model\Envelope
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getEnvelope($account_id, $envelope_id, EnvelopesApi\GetEnvelopeOptions $options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getEnvelopeWithHttpInfo ($account_id, $envelope_id, $options);
        return $response; 
    }


    /**
     * getEnvelopeWithHttpInfo
     *
     * Gets the status of a envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return Array of \DocuSign\eSign\Model\Envelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getEnvelopeWithHttpInfo($account_id, $envelope_id, EnvelopesApi\GetEnvelopeOptions $options = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getEnvelope');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling getEnvelope');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        if ($options != null)
        {
        // query params
        
        
        if ($options->getInclude() !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($options->getInclude());
        }
        }
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Envelope'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Envelope', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Envelope', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * update
     *
     * Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Envelope $envelope TBD Description (optional) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return \DocuSign\eSign\Model\EnvelopeUpdateSummary
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function update($account_id, $envelope_id, $envelope = null, EnvelopesApi\UpdateOptions $options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateWithHttpInfo ($account_id, $envelope_id, $envelope, $options);
        return $response; 
    }


    /**
     * updateWithHttpInfo
     *
     * Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Envelope $envelope TBD Description (optional) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return Array of \DocuSign\eSign\Model\EnvelopeUpdateSummary, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($account_id, $envelope_id, $envelope = null, EnvelopesApi\UpdateOptions $options = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling update');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling update');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        if ($options != null)
        {
        // query params
        
        
        if ($options->getResendEnvelope() !== null) {
            $queryParams['resend_envelope'] = $this->apiClient->getSerializer()->toQueryValue($options->getResendEnvelope());
        }
        }
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope)) {
            $_tempBody = $envelope;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeUpdateSummary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeUpdateSummary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeUpdateSummary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listAuditEvents
     *
     * Gets the envelope audit events for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\EnvelopeAuditEventResponse
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listAuditEvents($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listAuditEventsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * listAuditEventsWithHttpInfo
     *
     * Gets the envelope audit events for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\EnvelopeAuditEventResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listAuditEventsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listAuditEvents');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listAuditEvents');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/audit_events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeAuditEventResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeAuditEventResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeAuditEventResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listCustomFields
     *
     * Gets the custom field information for the specified envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\CustomFieldsEnvelope
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listCustomFields($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listCustomFieldsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * listCustomFieldsWithHttpInfo
     *
     * Gets the custom field information for the specified envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\CustomFieldsEnvelope, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listCustomFieldsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listCustomFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFieldsEnvelope'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFieldsEnvelope', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFieldsEnvelope', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateCustomFields
     *
     * Updates envelope custom fields in an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CustomFields $custom_fields TBD Description (optional)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateCustomFields($account_id, $envelope_id, $custom_fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateCustomFieldsWithHttpInfo ($account_id, $envelope_id, $custom_fields);
        return $response; 
    }


    /**
     * updateCustomFieldsWithHttpInfo
     *
     * Updates envelope custom fields in an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CustomFields $custom_fields TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateCustomFieldsWithHttpInfo($account_id, $envelope_id, $custom_fields = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateCustomFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($custom_fields)) {
            $_tempBody = $custom_fields;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createCustomFields
     *
     * Updates envelope custom fields for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CustomFields $custom_fields TBD Description (optional)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createCustomFields($account_id, $envelope_id, $custom_fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createCustomFieldsWithHttpInfo ($account_id, $envelope_id, $custom_fields);
        return $response; 
    }


    /**
     * createCustomFieldsWithHttpInfo
     *
     * Updates envelope custom fields for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CustomFields $custom_fields TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createCustomFieldsWithHttpInfo($account_id, $envelope_id, $custom_fields = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createCustomFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($custom_fields)) {
            $_tempBody = $custom_fields;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteCustomFields
     *
     * Deletes envelope custom fields for draft and in-process envelopes.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CustomFields $custom_fields TBD Description (optional)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteCustomFields($account_id, $envelope_id, $custom_fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteCustomFieldsWithHttpInfo ($account_id, $envelope_id, $custom_fields);
        return $response; 
    }


    /**
     * deleteCustomFieldsWithHttpInfo
     *
     * Deletes envelope custom fields for draft and in-process envelopes.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CustomFields $custom_fields TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteCustomFieldsWithHttpInfo($account_id, $envelope_id, $custom_fields = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteCustomFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($custom_fields)) {
            $_tempBody = $custom_fields;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listDocuments
     *
     * Gets a list of envelope documents.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\EnvelopeDocumentsResult
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocuments($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listDocumentsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * listDocumentsWithHttpInfo
     *
     * Gets a list of envelope documents.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\EnvelopeDocumentsResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocumentsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listDocuments');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listDocuments');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeDocumentsResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeDocumentsResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeDocumentsResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateDocuments
     *
     * Adds one or more documents to an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return \DocuSign\eSign\Model\EnvelopeDocumentsResult
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocuments($account_id, $envelope_id, $envelope_definition = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateDocumentsWithHttpInfo ($account_id, $envelope_id, $envelope_definition);
        return $response; 
    }


    /**
     * updateDocumentsWithHttpInfo
     *
     * Adds one or more documents to an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\EnvelopeDocumentsResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocumentsWithHttpInfo($account_id, $envelope_id, $envelope_definition = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateDocuments');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateDocuments');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_definition)) {
            $_tempBody = $envelope_definition;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeDocumentsResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeDocumentsResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeDocumentsResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteDocuments
     *
     * Deletes documents from a draft envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return \DocuSign\eSign\Model\EnvelopeDocumentsResult
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocuments($account_id, $envelope_id, $envelope_definition = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteDocumentsWithHttpInfo ($account_id, $envelope_id, $envelope_definition);
        return $response; 
    }


    /**
     * deleteDocumentsWithHttpInfo
     *
     * Deletes documents from a draft envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\EnvelopeDocumentsResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentsWithHttpInfo($account_id, $envelope_id, $envelope_definition = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDocuments');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteDocuments');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_definition)) {
            $_tempBody = $envelope_definition;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeDocumentsResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeDocumentsResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeDocumentsResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getDocument
     *
     * Gets a document from an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return \SplFileObject
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getDocument($account_id, $envelope_id, $document_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getDocumentWithHttpInfo ($account_id, $envelope_id, $document_id);
        return $response; 
    }


    /**
     * getDocumentWithHttpInfo
     *
     * Gets a document from an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getDocumentWithHttpInfo($account_id, $envelope_id, $document_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getDocument');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling getDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling getDocument');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/pdf'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\SplFileObject'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listDocumentFields
     *
     * Gets the custom document fields from an  existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocumentFields($account_id, $envelope_id, $document_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listDocumentFieldsWithHttpInfo ($account_id, $envelope_id, $document_id);
        return $response; 
    }


    /**
     * listDocumentFieldsWithHttpInfo
     *
     * Gets the custom document fields from an  existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocumentFieldsWithHttpInfo($account_id, $envelope_id, $document_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listDocumentFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling listDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateDocumentFields
     *
     * Updates existing custom document fields in an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocumentFields($account_id, $envelope_id, $document_id, $document_fields_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateDocumentFieldsWithHttpInfo ($account_id, $envelope_id, $document_id, $document_fields_information);
        return $response; 
    }


    /**
     * updateDocumentFieldsWithHttpInfo
     *
     * Updates existing custom document fields in an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocumentFieldsWithHttpInfo($account_id, $envelope_id, $document_id, $document_fields_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateDocumentFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling updateDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_fields_information)) {
            $_tempBody = $document_fields_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createDocumentFields
     *
     * Creates custom document fields in an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createDocumentFields($account_id, $envelope_id, $document_id, $document_fields_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createDocumentFieldsWithHttpInfo ($account_id, $envelope_id, $document_id, $document_fields_information);
        return $response; 
    }


    /**
     * createDocumentFieldsWithHttpInfo
     *
     * Creates custom document fields in an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createDocumentFieldsWithHttpInfo($account_id, $envelope_id, $document_id, $document_fields_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createDocumentFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling createDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_fields_information)) {
            $_tempBody = $document_fields_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteDocumentFields
     *
     * Deletes custom document fields from an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentFields($account_id, $envelope_id, $document_id, $document_fields_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteDocumentFieldsWithHttpInfo ($account_id, $envelope_id, $document_id, $document_fields_information);
        return $response; 
    }


    /**
     * deleteDocumentFieldsWithHttpInfo
     *
     * Deletes custom document fields from an existing envelope document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentFieldsWithHttpInfo($account_id, $envelope_id, $document_id, $document_fields_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDocumentFields');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deleteDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_fields_information)) {
            $_tempBody = $document_fields_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteDocumentPage
     *
     * Deletes a page from a document in an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param string $page_number The page number being accessed. (required)
     * @return void
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentPage($account_id, $envelope_id, $document_id, $page_number)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteDocumentPageWithHttpInfo ($account_id, $envelope_id, $document_id, $page_number);
        return $response; 
    }


    /**
     * deleteDocumentPageWithHttpInfo
     *
     * Deletes a page from a document in an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param string $page_number The page number being accessed. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentPageWithHttpInfo($account_id, $envelope_id, $document_id, $page_number)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDocumentPage');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteDocumentPage');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deleteDocumentPage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling deleteDocumentPage');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }// path params
        
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listTemplatesForDocument
     *
     * Gets the templates associated with a document in an existing envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return \DocuSign\eSign\Model\TemplateInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTemplatesForDocument($account_id, $envelope_id, $document_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listTemplatesForDocumentWithHttpInfo ($account_id, $envelope_id, $document_id);
        return $response; 
    }


    /**
     * listTemplatesForDocumentWithHttpInfo
     *
     * Gets the templates associated with a document in an existing envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\TemplateInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTemplatesForDocumentWithHttpInfo($account_id, $envelope_id, $document_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listTemplatesForDocument');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listTemplatesForDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling listTemplatesForDocument');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applyTemplateToDocument
     *
     * Adds templates to a document in an  envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentTemplateList $document_template_list TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentTemplateList
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function applyTemplateToDocument($account_id, $envelope_id, $document_id, $document_template_list = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applyTemplateToDocumentWithHttpInfo ($account_id, $envelope_id, $document_id, $document_template_list);
        return $response; 
    }


    /**
     * applyTemplateToDocumentWithHttpInfo
     *
     * Adds templates to a document in an  envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentTemplateList $document_template_list TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentTemplateList, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function applyTemplateToDocumentWithHttpInfo($account_id, $envelope_id, $document_id, $document_template_list = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling applyTemplateToDocument');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling applyTemplateToDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling applyTemplateToDocument');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_template_list)) {
            $_tempBody = $document_template_list;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentTemplateList'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentTemplateList', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentTemplateList', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteTemplatesFromDocument
     *
     * Deletes a template from a document in an existing envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return void
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteTemplatesFromDocument($account_id, $envelope_id, $document_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteTemplatesFromDocumentWithHttpInfo ($account_id, $envelope_id, $document_id, $template_id);
        return $response; 
    }


    /**
     * deleteTemplatesFromDocumentWithHttpInfo
     *
     * Deletes a template from a document in an existing envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteTemplatesFromDocumentWithHttpInfo($account_id, $envelope_id, $document_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteTemplatesFromDocument');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteTemplatesFromDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deleteTemplatesFromDocument');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteTemplatesFromDocument');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates/{templateId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getEmailSettings
     *
     * Gets the email setting overrides for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\EmailSettings
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getEmailSettings($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getEmailSettingsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * getEmailSettingsWithHttpInfo
     *
     * Gets the email setting overrides for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\EmailSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getEmailSettingsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getEmailSettings');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling getEmailSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EmailSettings'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EmailSettings', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EmailSettings', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateEmailSettings
     *
     * Updates the email setting overrides for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EmailSettings $email_settings TBD Description (optional)
     * @return \DocuSign\eSign\Model\EmailSettings
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateEmailSettings($account_id, $envelope_id, $email_settings = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateEmailSettingsWithHttpInfo ($account_id, $envelope_id, $email_settings);
        return $response; 
    }


    /**
     * updateEmailSettingsWithHttpInfo
     *
     * Updates the email setting overrides for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EmailSettings $email_settings TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\EmailSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateEmailSettingsWithHttpInfo($account_id, $envelope_id, $email_settings = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateEmailSettings');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateEmailSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($email_settings)) {
            $_tempBody = $email_settings;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EmailSettings'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EmailSettings', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EmailSettings', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createEmailSettings
     *
     * Adds email setting overrides to an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EmailSettings $email_settings TBD Description (optional)
     * @return \DocuSign\eSign\Model\EmailSettings
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createEmailSettings($account_id, $envelope_id, $email_settings = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createEmailSettingsWithHttpInfo ($account_id, $envelope_id, $email_settings);
        return $response; 
    }


    /**
     * createEmailSettingsWithHttpInfo
     *
     * Adds email setting overrides to an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\EmailSettings $email_settings TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\EmailSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createEmailSettingsWithHttpInfo($account_id, $envelope_id, $email_settings = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createEmailSettings');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createEmailSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($email_settings)) {
            $_tempBody = $email_settings;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EmailSettings'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EmailSettings', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EmailSettings', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteEmailSettings
     *
     * Deletes the email setting overrides for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\EmailSettings
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteEmailSettings($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteEmailSettingsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * deleteEmailSettingsWithHttpInfo
     *
     * Deletes the email setting overrides for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\EmailSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteEmailSettingsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteEmailSettings');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteEmailSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/email_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EmailSettings'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EmailSettings', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EmailSettings', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getLock
     *
     * Gets envelope lock information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\LockInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getLock($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getLockWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * getLockWithHttpInfo
     *
     * Gets envelope lock information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\LockInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getLockWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getLock');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling getLock');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\LockInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\LockInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\LockInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateLock
     *
     * Updates an envelope lock.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\LockRequest $lock_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\LockInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateLock($account_id, $envelope_id, $lock_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateLockWithHttpInfo ($account_id, $envelope_id, $lock_request);
        return $response; 
    }


    /**
     * updateLockWithHttpInfo
     *
     * Updates an envelope lock.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\LockRequest $lock_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\LockInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateLockWithHttpInfo($account_id, $envelope_id, $lock_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateLock');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateLock');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($lock_request)) {
            $_tempBody = $lock_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\LockInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\LockInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\LockInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createLock
     *
     * Lock an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\LockRequest $lock_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\LockInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createLock($account_id, $envelope_id, $lock_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createLockWithHttpInfo ($account_id, $envelope_id, $lock_request);
        return $response; 
    }


    /**
     * createLockWithHttpInfo
     *
     * Lock an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\LockRequest $lock_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\LockInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createLockWithHttpInfo($account_id, $envelope_id, $lock_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createLock');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createLock');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($lock_request)) {
            $_tempBody = $lock_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\LockInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\LockInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\LockInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteLock
     *
     * Deletes an envelope lock.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\LockInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteLock($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteLockWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * deleteLockWithHttpInfo
     *
     * Deletes an envelope lock.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\LockInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteLockWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteLock');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteLock');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\LockInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\LockInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\LockInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getNotificationSettings
     *
     * Gets envelope notification information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\Notification
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getNotificationSettings($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getNotificationSettingsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * getNotificationSettingsWithHttpInfo
     *
     * Gets envelope notification information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getNotificationSettingsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getNotificationSettings');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling getNotificationSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/notification";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Notification'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Notification', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Notification', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listRecipients
     *
     * Gets the status of recipients for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listRecipients($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listRecipientsWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * listRecipientsWithHttpInfo
     *
     * Gets the status of recipients for an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listRecipientsWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listRecipients');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateRecipients
     *
     * Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Recipients $recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\RecipientsUpdateSummary
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateRecipients($account_id, $envelope_id, $recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateRecipientsWithHttpInfo ($account_id, $envelope_id, $recipients);
        return $response; 
    }


    /**
     * updateRecipientsWithHttpInfo
     *
     * Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Recipients $recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\RecipientsUpdateSummary, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateRecipientsWithHttpInfo($account_id, $envelope_id, $recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateRecipients');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($recipients)) {
            $_tempBody = $recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\RecipientsUpdateSummary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\RecipientsUpdateSummary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\RecipientsUpdateSummary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createRecipient
     *
     * Adds one or more recipients to an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Recipients $recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createRecipient($account_id, $envelope_id, $recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createRecipientWithHttpInfo ($account_id, $envelope_id, $recipients);
        return $response; 
    }


    /**
     * createRecipientWithHttpInfo
     *
     * Adds one or more recipients to an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Recipients $recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createRecipientWithHttpInfo($account_id, $envelope_id, $recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createRecipient');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createRecipient');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($recipients)) {
            $_tempBody = $recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteRecipients
     *
     * Deletes recipients from an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Recipients $recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipients($account_id, $envelope_id, $recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteRecipientsWithHttpInfo ($account_id, $envelope_id, $recipients);
        return $response; 
    }


    /**
     * deleteRecipientsWithHttpInfo
     *
     * Deletes recipients from an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\Recipients $recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipientsWithHttpInfo($account_id, $envelope_id, $recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteRecipients');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($recipients)) {
            $_tempBody = $recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteRecipient
     *
     * Deletes a recipient from an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipient($account_id, $envelope_id, $recipient_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteRecipientWithHttpInfo ($account_id, $envelope_id, $recipient_id);
        return $response; 
    }


    /**
     * deleteRecipientWithHttpInfo
     *
     * Deletes a recipient from an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipientWithHttpInfo($account_id, $envelope_id, $recipient_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteRecipient');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteRecipient');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling deleteRecipient');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listTabs
     *
     * Gets the tabs information for a signer or sign-in-person recipient in an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTabs($account_id, $envelope_id, $recipient_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listTabsWithHttpInfo ($account_id, $envelope_id, $recipient_id);
        return $response; 
    }


    /**
     * listTabsWithHttpInfo
     *
     * Gets the tabs information for a signer or sign-in-person recipient in an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTabsWithHttpInfo($account_id, $envelope_id, $recipient_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listTabs');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling listTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateTabs
     *
     * Updates the tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateTabs($account_id, $envelope_id, $recipient_id, $tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateTabsWithHttpInfo ($account_id, $envelope_id, $recipient_id, $tabs);
        return $response; 
    }


    /**
     * updateTabsWithHttpInfo
     *
     * Updates the tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateTabsWithHttpInfo($account_id, $envelope_id, $recipient_id, $tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateTabs');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling updateTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling updateTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tabs)) {
            $_tempBody = $tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createTabs
     *
     * Adds tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createTabs($account_id, $envelope_id, $recipient_id, $tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createTabsWithHttpInfo ($account_id, $envelope_id, $recipient_id, $tabs);
        return $response; 
    }


    /**
     * createTabsWithHttpInfo
     *
     * Adds tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createTabsWithHttpInfo($account_id, $envelope_id, $recipient_id, $tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createTabs');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling createTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tabs)) {
            $_tempBody = $tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteTabs
     *
     * Deletes the tabs associated with a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteTabs($account_id, $envelope_id, $recipient_id, $tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteTabsWithHttpInfo ($account_id, $envelope_id, $recipient_id, $tabs);
        return $response; 
    }


    /**
     * deleteTabsWithHttpInfo
     *
     * Deletes the tabs associated with a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteTabsWithHttpInfo($account_id, $envelope_id, $recipient_id, $tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteTabs');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling deleteTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tabs)) {
            $_tempBody = $tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listTemplates
     *
     * Get List of Templates used in an Envelope
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return \DocuSign\eSign\Model\TemplateInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTemplates($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listTemplatesWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * listTemplatesWithHttpInfo
     *
     * Get List of Templates used in an Envelope
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\TemplateInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTemplatesWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listTemplates');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling listTemplates');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applyTemplate
     *
     * Adds templates to an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentTemplateList $document_template_list TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentTemplateList
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function applyTemplate($account_id, $envelope_id, $document_template_list = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applyTemplateWithHttpInfo ($account_id, $envelope_id, $document_template_list);
        return $response; 
    }


    /**
     * applyTemplateWithHttpInfo
     *
     * Adds templates to an envelope.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentTemplateList $document_template_list TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentTemplateList, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function applyTemplateWithHttpInfo($account_id, $envelope_id, $document_template_list = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling applyTemplate');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling applyTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_template_list)) {
            $_tempBody = $document_template_list;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentTemplateList'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentTemplateList', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentTemplateList', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createCorrectView
     *
     * Returns a URL to the envelope correction UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CorrectViewRequest $correct_view_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\ViewUrl
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createCorrectView($account_id, $envelope_id, $correct_view_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createCorrectViewWithHttpInfo ($account_id, $envelope_id, $correct_view_request);
        return $response; 
    }


    /**
     * createCorrectViewWithHttpInfo
     *
     * Returns a URL to the envelope correction UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\CorrectViewRequest $correct_view_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\ViewUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createCorrectViewWithHttpInfo($account_id, $envelope_id, $correct_view_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createCorrectView');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createCorrectView');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/correct";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($correct_view_request)) {
            $_tempBody = $correct_view_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\ViewUrl'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\ViewUrl', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ViewUrl', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createEditView
     *
     * Returns a URL to the edit view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\ReturnUrlRequest $return_url_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\ViewUrl
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createEditView($account_id, $envelope_id, $return_url_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createEditViewWithHttpInfo ($account_id, $envelope_id, $return_url_request);
        return $response; 
    }


    /**
     * createEditViewWithHttpInfo
     *
     * Returns a URL to the edit view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\ReturnUrlRequest $return_url_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\ViewUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createEditViewWithHttpInfo($account_id, $envelope_id, $return_url_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createEditView');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createEditView');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/edit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($return_url_request)) {
            $_tempBody = $return_url_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\ViewUrl'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\ViewUrl', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ViewUrl', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createRecipientView
     *
     * Returns a URL to the recipient view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\RecipientViewRequest $recipient_view_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\ViewUrl
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createRecipientView($account_id, $envelope_id, $recipient_view_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createRecipientViewWithHttpInfo ($account_id, $envelope_id, $recipient_view_request);
        return $response; 
    }


    /**
     * createRecipientViewWithHttpInfo
     *
     * Returns a URL to the recipient view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\RecipientViewRequest $recipient_view_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\ViewUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createRecipientViewWithHttpInfo($account_id, $envelope_id, $recipient_view_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createRecipientView');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createRecipientView');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/recipient";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($recipient_view_request)) {
            $_tempBody = $recipient_view_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\ViewUrl'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\ViewUrl', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ViewUrl', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createSenderView
     *
     * Returns a URL to the sender view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\ReturnUrlRequest $return_url_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\ViewUrl
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createSenderView($account_id, $envelope_id, $return_url_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createSenderViewWithHttpInfo ($account_id, $envelope_id, $return_url_request);
        return $response; 
    }


    /**
     * createSenderViewWithHttpInfo
     *
     * Returns a URL to the sender view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\ReturnUrlRequest $return_url_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\ViewUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createSenderViewWithHttpInfo($account_id, $envelope_id, $return_url_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createSenderView');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createSenderView');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/sender";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($return_url_request)) {
            $_tempBody = $return_url_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\ViewUrl'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\ViewUrl', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ViewUrl', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createViewLink
     *
     * Reserved: Returns a URL to the secure link view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\ViewLinkRequest $view_link_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\ViewUrl
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createViewLink($account_id, $envelope_id, $view_link_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createViewLinkWithHttpInfo ($account_id, $envelope_id, $view_link_request);
        return $response; 
    }


    /**
     * createViewLinkWithHttpInfo
     *
     * Reserved: Returns a URL to the secure link view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required) *
     @param \DocuSign\eSign\Model\ViewLinkRequest $view_link_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\ViewUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createViewLinkWithHttpInfo($account_id, $envelope_id, $view_link_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createViewLink');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling createViewLink');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/viewlink";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($view_link_request)) {
            $_tempBody = $view_link_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\ViewUrl'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\ViewUrl', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ViewUrl', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteViewLink
     *
     * Reserved: Expires a secure view link.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return void
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteViewLink($account_id, $envelope_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteViewLinkWithHttpInfo ($account_id, $envelope_id);
        return $response; 
    }


    /**
     * deleteViewLinkWithHttpInfo
     *
     * Reserved: Expires a secure view link.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $envelope_id The envelopeId Guid of the envelope being accessed. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteViewLinkWithHttpInfo($account_id, $envelope_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteViewLink');
        }
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $envelope_id when calling deleteViewLink');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/viewlink";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                "{" . "envelopeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($envelope_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createConsoleView
     *
     * Returns a URL to the authentication view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\ConsoleViewRequest $console_view_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\ViewUrl
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createConsoleView($account_id, $console_view_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createConsoleViewWithHttpInfo ($account_id, $console_view_request);
        return $response; 
    }


    /**
     * createConsoleViewWithHttpInfo
     *
     * Returns a URL to the authentication view UI.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\ConsoleViewRequest $console_view_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\ViewUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createConsoleViewWithHttpInfo($account_id, $console_view_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createConsoleView');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/views/console";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($console_view_request)) {
            $_tempBody = $console_view_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\ViewUrl'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\ViewUrl', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ViewUrl', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
