<?php
/**
 * AccountInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * AccountInformation Class Doc Comment
 *
 * @category    Class
 * @description Contains account Information.
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccountInformation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'current_plan_id' => 'string',
        'plan_name' => 'string',
        'plan_classification' => 'string',
        'plan_start_date' => 'string',
        'plan_end_date' => 'string',
        'billing_period_start_date' => 'string',
        'billing_period_end_date' => 'string',
        'billing_period_envelopes_sent' => 'string',
        'billing_period_envelopes_allowed' => 'string',
        'billing_period_days_remaining' => 'string',
        'can_upgrade' => 'string',
        'can_cancel_renewal' => 'string',
        'envelope_sending_blocked' => 'string',
        'envelope_unit_price' => 'string',
        'suspension_status' => 'string',
        'suspension_date' => 'string',
        'account_name' => 'string',
        'connect_permission' => 'string',
        'docu_sign_landing_url' => 'string',
        'distributor_code' => 'string',
        'account_id_guid' => 'string',
        'currency_code' => 'string',
        'forgotten_password_questions_count' => 'string',
        'payment_method' => 'string',
        'seats_allowed' => 'string',
        'seats_in_use' => 'string',
        'created_date' => 'string',
        'is_downgrade' => 'string',
        'billing_profile' => 'string',
        'status21_cfr_part11' => 'string',
        'allow_transaction_rooms' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'current_plan_id' => 'currentPlanId',
        'plan_name' => 'planName',
        'plan_classification' => 'planClassification',
        'plan_start_date' => 'planStartDate',
        'plan_end_date' => 'planEndDate',
        'billing_period_start_date' => 'billingPeriodStartDate',
        'billing_period_end_date' => 'billingPeriodEndDate',
        'billing_period_envelopes_sent' => 'billingPeriodEnvelopesSent',
        'billing_period_envelopes_allowed' => 'billingPeriodEnvelopesAllowed',
        'billing_period_days_remaining' => 'billingPeriodDaysRemaining',
        'can_upgrade' => 'canUpgrade',
        'can_cancel_renewal' => 'canCancelRenewal',
        'envelope_sending_blocked' => 'envelopeSendingBlocked',
        'envelope_unit_price' => 'envelopeUnitPrice',
        'suspension_status' => 'suspensionStatus',
        'suspension_date' => 'suspensionDate',
        'account_name' => 'accountName',
        'connect_permission' => 'connectPermission',
        'docu_sign_landing_url' => 'docuSignLandingUrl',
        'distributor_code' => 'distributorCode',
        'account_id_guid' => 'accountIdGuid',
        'currency_code' => 'currencyCode',
        'forgotten_password_questions_count' => 'forgottenPasswordQuestionsCount',
        'payment_method' => 'paymentMethod',
        'seats_allowed' => 'seatsAllowed',
        'seats_in_use' => 'seatsInUse',
        'created_date' => 'createdDate',
        'is_downgrade' => 'isDowngrade',
        'billing_profile' => 'billingProfile',
        'status21_cfr_part11' => 'status21CFRPart11',
        'allow_transaction_rooms' => 'allowTransactionRooms'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'current_plan_id' => 'setCurrentPlanId',
        'plan_name' => 'setPlanName',
        'plan_classification' => 'setPlanClassification',
        'plan_start_date' => 'setPlanStartDate',
        'plan_end_date' => 'setPlanEndDate',
        'billing_period_start_date' => 'setBillingPeriodStartDate',
        'billing_period_end_date' => 'setBillingPeriodEndDate',
        'billing_period_envelopes_sent' => 'setBillingPeriodEnvelopesSent',
        'billing_period_envelopes_allowed' => 'setBillingPeriodEnvelopesAllowed',
        'billing_period_days_remaining' => 'setBillingPeriodDaysRemaining',
        'can_upgrade' => 'setCanUpgrade',
        'can_cancel_renewal' => 'setCanCancelRenewal',
        'envelope_sending_blocked' => 'setEnvelopeSendingBlocked',
        'envelope_unit_price' => 'setEnvelopeUnitPrice',
        'suspension_status' => 'setSuspensionStatus',
        'suspension_date' => 'setSuspensionDate',
        'account_name' => 'setAccountName',
        'connect_permission' => 'setConnectPermission',
        'docu_sign_landing_url' => 'setDocuSignLandingUrl',
        'distributor_code' => 'setDistributorCode',
        'account_id_guid' => 'setAccountIdGuid',
        'currency_code' => 'setCurrencyCode',
        'forgotten_password_questions_count' => 'setForgottenPasswordQuestionsCount',
        'payment_method' => 'setPaymentMethod',
        'seats_allowed' => 'setSeatsAllowed',
        'seats_in_use' => 'setSeatsInUse',
        'created_date' => 'setCreatedDate',
        'is_downgrade' => 'setIsDowngrade',
        'billing_profile' => 'setBillingProfile',
        'status21_cfr_part11' => 'setStatus21CfrPart11',
        'allow_transaction_rooms' => 'setAllowTransactionRooms'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'current_plan_id' => 'getCurrentPlanId',
        'plan_name' => 'getPlanName',
        'plan_classification' => 'getPlanClassification',
        'plan_start_date' => 'getPlanStartDate',
        'plan_end_date' => 'getPlanEndDate',
        'billing_period_start_date' => 'getBillingPeriodStartDate',
        'billing_period_end_date' => 'getBillingPeriodEndDate',
        'billing_period_envelopes_sent' => 'getBillingPeriodEnvelopesSent',
        'billing_period_envelopes_allowed' => 'getBillingPeriodEnvelopesAllowed',
        'billing_period_days_remaining' => 'getBillingPeriodDaysRemaining',
        'can_upgrade' => 'getCanUpgrade',
        'can_cancel_renewal' => 'getCanCancelRenewal',
        'envelope_sending_blocked' => 'getEnvelopeSendingBlocked',
        'envelope_unit_price' => 'getEnvelopeUnitPrice',
        'suspension_status' => 'getSuspensionStatus',
        'suspension_date' => 'getSuspensionDate',
        'account_name' => 'getAccountName',
        'connect_permission' => 'getConnectPermission',
        'docu_sign_landing_url' => 'getDocuSignLandingUrl',
        'distributor_code' => 'getDistributorCode',
        'account_id_guid' => 'getAccountIdGuid',
        'currency_code' => 'getCurrencyCode',
        'forgotten_password_questions_count' => 'getForgottenPasswordQuestionsCount',
        'payment_method' => 'getPaymentMethod',
        'seats_allowed' => 'getSeatsAllowed',
        'seats_in_use' => 'getSeatsInUse',
        'created_date' => 'getCreatedDate',
        'is_downgrade' => 'getIsDowngrade',
        'billing_profile' => 'getBillingProfile',
        'status21_cfr_part11' => 'getStatus21CfrPart11',
        'allow_transaction_rooms' => 'getAllowTransactionRooms'
    );
  
    
    /**
      * $current_plan_id Identifies the plan that was used create this account.
      * @var string
      */
    protected $current_plan_id;
    
    /**
      * $plan_name The name of the Billing Plan.
      * @var string
      */
    protected $plan_name;
    
    /**
      * $plan_classification Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.
      * @var string
      */
    protected $plan_classification;
    
    /**
      * $plan_start_date The date that the Account started using the current plan.
      * @var string
      */
    protected $plan_start_date;
    
    /**
      * $plan_end_date The date that the current plan will end.
      * @var string
      */
    protected $plan_end_date;
    
    /**
      * $billing_period_start_date Reserved: TBD
      * @var string
      */
    protected $billing_period_start_date;
    
    /**
      * $billing_period_end_date Reserved: TBD
      * @var string
      */
    protected $billing_period_end_date;
    
    /**
      * $billing_period_envelopes_sent Reserved: TBD
      * @var string
      */
    protected $billing_period_envelopes_sent;
    
    /**
      * $billing_period_envelopes_allowed Reserved: TBD
      * @var string
      */
    protected $billing_period_envelopes_allowed;
    
    /**
      * $billing_period_days_remaining Reserved: TBD
      * @var string
      */
    protected $billing_period_days_remaining;
    
    /**
      * $can_upgrade When set to **true**, specifies that you can upgrade the account through the API.
      * @var string
      */
    protected $can_upgrade;
    
    /**
      * $can_cancel_renewal Reserved: TBD
      * @var string
      */
    protected $can_cancel_renewal;
    
    /**
      * $envelope_sending_blocked 
      * @var string
      */
    protected $envelope_sending_blocked;
    
    /**
      * $envelope_unit_price 
      * @var string
      */
    protected $envelope_unit_price;
    
    /**
      * $suspension_status 
      * @var string
      */
    protected $suspension_status;
    
    /**
      * $suspension_date 
      * @var string
      */
    protected $suspension_date;
    
    /**
      * $account_name The name of the current account.
      * @var string
      */
    protected $account_name;
    
    /**
      * $connect_permission 
      * @var string
      */
    protected $connect_permission;
    
    /**
      * $docu_sign_landing_url 
      * @var string
      */
    protected $docu_sign_landing_url;
    
    /**
      * $distributor_code The code that identifies the billing plan groups and plans for the new account.
      * @var string
      */
    protected $distributor_code;
    
    /**
      * $account_id_guid The GUID associated with the account ID.
      * @var string
      */
    protected $account_id_guid;
    
    /**
      * $currency_code Specifies the ISO currency code for the account.
      * @var string
      */
    protected $currency_code;
    
    /**
      * $forgotten_password_questions_count A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.
      * @var string
      */
    protected $forgotten_password_questions_count;
    
    /**
      * $payment_method 
      * @var string
      */
    protected $payment_method;
    
    /**
      * $seats_allowed 
      * @var string
      */
    protected $seats_allowed;
    
    /**
      * $seats_in_use 
      * @var string
      */
    protected $seats_in_use;
    
    /**
      * $created_date 
      * @var string
      */
    protected $created_date;
    
    /**
      * $is_downgrade 
      * @var string
      */
    protected $is_downgrade;
    
    /**
      * $billing_profile Reserved: TBD
      * @var string
      */
    protected $billing_profile;
    
    /**
      * $status21_cfr_part11 
      * @var string
      */
    protected $status21_cfr_part11;
    
    /**
      * $allow_transaction_rooms When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
      * @var string
      */
    protected $allow_transaction_rooms;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->current_plan_id = $data["current_plan_id"];
            $this->plan_name = $data["plan_name"];
            $this->plan_classification = $data["plan_classification"];
            $this->plan_start_date = $data["plan_start_date"];
            $this->plan_end_date = $data["plan_end_date"];
            $this->billing_period_start_date = $data["billing_period_start_date"];
            $this->billing_period_end_date = $data["billing_period_end_date"];
            $this->billing_period_envelopes_sent = $data["billing_period_envelopes_sent"];
            $this->billing_period_envelopes_allowed = $data["billing_period_envelopes_allowed"];
            $this->billing_period_days_remaining = $data["billing_period_days_remaining"];
            $this->can_upgrade = $data["can_upgrade"];
            $this->can_cancel_renewal = $data["can_cancel_renewal"];
            $this->envelope_sending_blocked = $data["envelope_sending_blocked"];
            $this->envelope_unit_price = $data["envelope_unit_price"];
            $this->suspension_status = $data["suspension_status"];
            $this->suspension_date = $data["suspension_date"];
            $this->account_name = $data["account_name"];
            $this->connect_permission = $data["connect_permission"];
            $this->docu_sign_landing_url = $data["docu_sign_landing_url"];
            $this->distributor_code = $data["distributor_code"];
            $this->account_id_guid = $data["account_id_guid"];
            $this->currency_code = $data["currency_code"];
            $this->forgotten_password_questions_count = $data["forgotten_password_questions_count"];
            $this->payment_method = $data["payment_method"];
            $this->seats_allowed = $data["seats_allowed"];
            $this->seats_in_use = $data["seats_in_use"];
            $this->created_date = $data["created_date"];
            $this->is_downgrade = $data["is_downgrade"];
            $this->billing_profile = $data["billing_profile"];
            $this->status21_cfr_part11 = $data["status21_cfr_part11"];
            $this->allow_transaction_rooms = $data["allow_transaction_rooms"];
        }
    }
    
    /**
     * Gets current_plan_id
     * @return string
     */
    public function getCurrentPlanId()
    {
        return $this->current_plan_id;
    }
  
    /**
     * Sets current_plan_id
     * @param string $current_plan_id Identifies the plan that was used create this account.
     * @return $this
     */
    public function setCurrentPlanId($current_plan_id)
    {
        
        $this->current_plan_id = $current_plan_id;
        return $this;
    }
    
    /**
     * Gets plan_name
     * @return string
     */
    public function getPlanName()
    {
        return $this->plan_name;
    }
  
    /**
     * Sets plan_name
     * @param string $plan_name The name of the Billing Plan.
     * @return $this
     */
    public function setPlanName($plan_name)
    {
        
        $this->plan_name = $plan_name;
        return $this;
    }
    
    /**
     * Gets plan_classification
     * @return string
     */
    public function getPlanClassification()
    {
        return $this->plan_classification;
    }
  
    /**
     * Sets plan_classification
     * @param string $plan_classification Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.
     * @return $this
     */
    public function setPlanClassification($plan_classification)
    {
        
        $this->plan_classification = $plan_classification;
        return $this;
    }
    
    /**
     * Gets plan_start_date
     * @return string
     */
    public function getPlanStartDate()
    {
        return $this->plan_start_date;
    }
  
    /**
     * Sets plan_start_date
     * @param string $plan_start_date The date that the Account started using the current plan.
     * @return $this
     */
    public function setPlanStartDate($plan_start_date)
    {
        
        $this->plan_start_date = $plan_start_date;
        return $this;
    }
    
    /**
     * Gets plan_end_date
     * @return string
     */
    public function getPlanEndDate()
    {
        return $this->plan_end_date;
    }
  
    /**
     * Sets plan_end_date
     * @param string $plan_end_date The date that the current plan will end.
     * @return $this
     */
    public function setPlanEndDate($plan_end_date)
    {
        
        $this->plan_end_date = $plan_end_date;
        return $this;
    }
    
    /**
     * Gets billing_period_start_date
     * @return string
     */
    public function getBillingPeriodStartDate()
    {
        return $this->billing_period_start_date;
    }
  
    /**
     * Sets billing_period_start_date
     * @param string $billing_period_start_date Reserved: TBD
     * @return $this
     */
    public function setBillingPeriodStartDate($billing_period_start_date)
    {
        
        $this->billing_period_start_date = $billing_period_start_date;
        return $this;
    }
    
    /**
     * Gets billing_period_end_date
     * @return string
     */
    public function getBillingPeriodEndDate()
    {
        return $this->billing_period_end_date;
    }
  
    /**
     * Sets billing_period_end_date
     * @param string $billing_period_end_date Reserved: TBD
     * @return $this
     */
    public function setBillingPeriodEndDate($billing_period_end_date)
    {
        
        $this->billing_period_end_date = $billing_period_end_date;
        return $this;
    }
    
    /**
     * Gets billing_period_envelopes_sent
     * @return string
     */
    public function getBillingPeriodEnvelopesSent()
    {
        return $this->billing_period_envelopes_sent;
    }
  
    /**
     * Sets billing_period_envelopes_sent
     * @param string $billing_period_envelopes_sent Reserved: TBD
     * @return $this
     */
    public function setBillingPeriodEnvelopesSent($billing_period_envelopes_sent)
    {
        
        $this->billing_period_envelopes_sent = $billing_period_envelopes_sent;
        return $this;
    }
    
    /**
     * Gets billing_period_envelopes_allowed
     * @return string
     */
    public function getBillingPeriodEnvelopesAllowed()
    {
        return $this->billing_period_envelopes_allowed;
    }
  
    /**
     * Sets billing_period_envelopes_allowed
     * @param string $billing_period_envelopes_allowed Reserved: TBD
     * @return $this
     */
    public function setBillingPeriodEnvelopesAllowed($billing_period_envelopes_allowed)
    {
        
        $this->billing_period_envelopes_allowed = $billing_period_envelopes_allowed;
        return $this;
    }
    
    /**
     * Gets billing_period_days_remaining
     * @return string
     */
    public function getBillingPeriodDaysRemaining()
    {
        return $this->billing_period_days_remaining;
    }
  
    /**
     * Sets billing_period_days_remaining
     * @param string $billing_period_days_remaining Reserved: TBD
     * @return $this
     */
    public function setBillingPeriodDaysRemaining($billing_period_days_remaining)
    {
        
        $this->billing_period_days_remaining = $billing_period_days_remaining;
        return $this;
    }
    
    /**
     * Gets can_upgrade
     * @return string
     */
    public function getCanUpgrade()
    {
        return $this->can_upgrade;
    }
  
    /**
     * Sets can_upgrade
     * @param string $can_upgrade When set to **true**, specifies that you can upgrade the account through the API.
     * @return $this
     */
    public function setCanUpgrade($can_upgrade)
    {
        
        $this->can_upgrade = $can_upgrade;
        return $this;
    }
    
    /**
     * Gets can_cancel_renewal
     * @return string
     */
    public function getCanCancelRenewal()
    {
        return $this->can_cancel_renewal;
    }
  
    /**
     * Sets can_cancel_renewal
     * @param string $can_cancel_renewal Reserved: TBD
     * @return $this
     */
    public function setCanCancelRenewal($can_cancel_renewal)
    {
        
        $this->can_cancel_renewal = $can_cancel_renewal;
        return $this;
    }
    
    /**
     * Gets envelope_sending_blocked
     * @return string
     */
    public function getEnvelopeSendingBlocked()
    {
        return $this->envelope_sending_blocked;
    }
  
    /**
     * Sets envelope_sending_blocked
     * @param string $envelope_sending_blocked 
     * @return $this
     */
    public function setEnvelopeSendingBlocked($envelope_sending_blocked)
    {
        
        $this->envelope_sending_blocked = $envelope_sending_blocked;
        return $this;
    }
    
    /**
     * Gets envelope_unit_price
     * @return string
     */
    public function getEnvelopeUnitPrice()
    {
        return $this->envelope_unit_price;
    }
  
    /**
     * Sets envelope_unit_price
     * @param string $envelope_unit_price 
     * @return $this
     */
    public function setEnvelopeUnitPrice($envelope_unit_price)
    {
        
        $this->envelope_unit_price = $envelope_unit_price;
        return $this;
    }
    
    /**
     * Gets suspension_status
     * @return string
     */
    public function getSuspensionStatus()
    {
        return $this->suspension_status;
    }
  
    /**
     * Sets suspension_status
     * @param string $suspension_status 
     * @return $this
     */
    public function setSuspensionStatus($suspension_status)
    {
        
        $this->suspension_status = $suspension_status;
        return $this;
    }
    
    /**
     * Gets suspension_date
     * @return string
     */
    public function getSuspensionDate()
    {
        return $this->suspension_date;
    }
  
    /**
     * Sets suspension_date
     * @param string $suspension_date 
     * @return $this
     */
    public function setSuspensionDate($suspension_date)
    {
        
        $this->suspension_date = $suspension_date;
        return $this;
    }
    
    /**
     * Gets account_name
     * @return string
     */
    public function getAccountName()
    {
        return $this->account_name;
    }
  
    /**
     * Sets account_name
     * @param string $account_name The name of the current account.
     * @return $this
     */
    public function setAccountName($account_name)
    {
        
        $this->account_name = $account_name;
        return $this;
    }
    
    /**
     * Gets connect_permission
     * @return string
     */
    public function getConnectPermission()
    {
        return $this->connect_permission;
    }
  
    /**
     * Sets connect_permission
     * @param string $connect_permission 
     * @return $this
     */
    public function setConnectPermission($connect_permission)
    {
        
        $this->connect_permission = $connect_permission;
        return $this;
    }
    
    /**
     * Gets docu_sign_landing_url
     * @return string
     */
    public function getDocuSignLandingUrl()
    {
        return $this->docu_sign_landing_url;
    }
  
    /**
     * Sets docu_sign_landing_url
     * @param string $docu_sign_landing_url 
     * @return $this
     */
    public function setDocuSignLandingUrl($docu_sign_landing_url)
    {
        
        $this->docu_sign_landing_url = $docu_sign_landing_url;
        return $this;
    }
    
    /**
     * Gets distributor_code
     * @return string
     */
    public function getDistributorCode()
    {
        return $this->distributor_code;
    }
  
    /**
     * Sets distributor_code
     * @param string $distributor_code The code that identifies the billing plan groups and plans for the new account.
     * @return $this
     */
    public function setDistributorCode($distributor_code)
    {
        
        $this->distributor_code = $distributor_code;
        return $this;
    }
    
    /**
     * Gets account_id_guid
     * @return string
     */
    public function getAccountIdGuid()
    {
        return $this->account_id_guid;
    }
  
    /**
     * Sets account_id_guid
     * @param string $account_id_guid The GUID associated with the account ID.
     * @return $this
     */
    public function setAccountIdGuid($account_id_guid)
    {
        
        $this->account_id_guid = $account_id_guid;
        return $this;
    }
    
    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currency_code;
    }
  
    /**
     * Sets currency_code
     * @param string $currency_code Specifies the ISO currency code for the account.
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        
        $this->currency_code = $currency_code;
        return $this;
    }
    
    /**
     * Gets forgotten_password_questions_count
     * @return string
     */
    public function getForgottenPasswordQuestionsCount()
    {
        return $this->forgotten_password_questions_count;
    }
  
    /**
     * Sets forgotten_password_questions_count
     * @param string $forgotten_password_questions_count A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.
     * @return $this
     */
    public function setForgottenPasswordQuestionsCount($forgotten_password_questions_count)
    {
        
        $this->forgotten_password_questions_count = $forgotten_password_questions_count;
        return $this;
    }
    
    /**
     * Gets payment_method
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->payment_method;
    }
  
    /**
     * Sets payment_method
     * @param string $payment_method 
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        
        $this->payment_method = $payment_method;
        return $this;
    }
    
    /**
     * Gets seats_allowed
     * @return string
     */
    public function getSeatsAllowed()
    {
        return $this->seats_allowed;
    }
  
    /**
     * Sets seats_allowed
     * @param string $seats_allowed 
     * @return $this
     */
    public function setSeatsAllowed($seats_allowed)
    {
        
        $this->seats_allowed = $seats_allowed;
        return $this;
    }
    
    /**
     * Gets seats_in_use
     * @return string
     */
    public function getSeatsInUse()
    {
        return $this->seats_in_use;
    }
  
    /**
     * Sets seats_in_use
     * @param string $seats_in_use 
     * @return $this
     */
    public function setSeatsInUse($seats_in_use)
    {
        
        $this->seats_in_use = $seats_in_use;
        return $this;
    }
    
    /**
     * Gets created_date
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->created_date;
    }
  
    /**
     * Sets created_date
     * @param string $created_date 
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        
        $this->created_date = $created_date;
        return $this;
    }
    
    /**
     * Gets is_downgrade
     * @return string
     */
    public function getIsDowngrade()
    {
        return $this->is_downgrade;
    }
  
    /**
     * Sets is_downgrade
     * @param string $is_downgrade 
     * @return $this
     */
    public function setIsDowngrade($is_downgrade)
    {
        
        $this->is_downgrade = $is_downgrade;
        return $this;
    }
    
    /**
     * Gets billing_profile
     * @return string
     */
    public function getBillingProfile()
    {
        return $this->billing_profile;
    }
  
    /**
     * Sets billing_profile
     * @param string $billing_profile Reserved: TBD
     * @return $this
     */
    public function setBillingProfile($billing_profile)
    {
        
        $this->billing_profile = $billing_profile;
        return $this;
    }
    
    /**
     * Gets status21_cfr_part11
     * @return string
     */
    public function getStatus21CfrPart11()
    {
        return $this->status21_cfr_part11;
    }
  
    /**
     * Sets status21_cfr_part11
     * @param string $status21_cfr_part11 
     * @return $this
     */
    public function setStatus21CfrPart11($status21_cfr_part11)
    {
        
        $this->status21_cfr_part11 = $status21_cfr_part11;
        return $this;
    }
    
    /**
     * Gets allow_transaction_rooms
     * @return string
     */
    public function getAllowTransactionRooms()
    {
        return $this->allow_transaction_rooms;
    }
  
    /**
     * Sets allow_transaction_rooms
     * @param string $allow_transaction_rooms When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
     * @return $this
     */
    public function setAllowTransactionRooms($allow_transaction_rooms)
    {
        
        $this->allow_transaction_rooms = $allow_transaction_rooms;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
