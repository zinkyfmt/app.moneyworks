<?php
/**
 * TemplatesApi
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */


namespace DocuSign\eSign\Api\TemplatesApi;



namespace DocuSign\eSign\Api;

use \DocuSign\eSign\Configuration;
use \DocuSign\eSign\ApiClient;
use \DocuSign\eSign\ApiException;
use \DocuSign\eSign\ObjectSerializer;

/**
 * TemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TemplatesApi
{

    /**
     * API Client
     * @var \DocuSign\eSign\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \DocuSign\eSign\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://www.docusign.net/restapi');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \DocuSign\eSign\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \DocuSign\eSign\ApiClient $apiClient set the API client
     * @return TemplatesApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    
    /**
     * listTemplates
     *
     * Gets the definition of a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required)
     * @return \DocuSign\eSign\Model\EnvelopeTemplateResults
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTemplates($account_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listTemplatesWithHttpInfo ($account_id);
        return $response; 
    }


    /**
     * listTemplatesWithHttpInfo
     *
     * Gets the definition of a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required)
     * @return Array of \DocuSign\eSign\Model\EnvelopeTemplateResults, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTemplatesWithHttpInfo($account_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listTemplates');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeTemplateResults'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeTemplateResults', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeTemplateResults', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createTemplate
     *
     * Creates an envelope from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\EnvelopeTemplate $envelope_template TBD Description (optional)
     * @return \DocuSign\eSign\Model\TemplateSummary
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createTemplate($account_id, $envelope_template = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createTemplateWithHttpInfo ($account_id, $envelope_template);
        return $response; 
    }


    /**
     * createTemplateWithHttpInfo
     *
     * Creates an envelope from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\EnvelopeTemplate $envelope_template TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\TemplateSummary, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createTemplateWithHttpInfo($account_id, $envelope_template = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_template)) {
            $_tempBody = $envelope_template;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateSummary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateSummary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateSummary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * get
     *
     * Gets a list of templates for a specified account.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return \DocuSign\eSign\Model\EnvelopeTemplate
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function get($account_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getWithHttpInfo ($account_id, $template_id);
        return $response; 
    }


    /**
     * getWithHttpInfo
     *
     * Gets a list of templates for a specified account.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\EnvelopeTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getWithHttpInfo($account_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling get');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling get');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\EnvelopeTemplate'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\EnvelopeTemplate', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\EnvelopeTemplate', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * update
     *
     * Updates an existing template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeTemplate $envelope_template TBD Description (optional)
     * @return \DocuSign\eSign\Model\TemplateUpdateSummary
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function update($account_id, $template_id, $envelope_template = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateWithHttpInfo ($account_id, $template_id, $envelope_template);
        return $response; 
    }


    /**
     * updateWithHttpInfo
     *
     * Updates an existing template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeTemplate $envelope_template TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\TemplateUpdateSummary, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($account_id, $template_id, $envelope_template = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling update');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling update');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_template)) {
            $_tempBody = $envelope_template;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateUpdateSummary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateUpdateSummary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateUpdateSummary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listCustomFields
     *
     * Gets the custom document fields from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listCustomFields($account_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listCustomFieldsWithHttpInfo ($account_id, $template_id);
        return $response; 
    }


    /**
     * listCustomFieldsWithHttpInfo
     *
     * Gets the custom document fields from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listCustomFieldsWithHttpInfo($account_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listCustomFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling listCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateCustomFields
     *
     * Updates envelope custom fields in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateCustomFields $template_custom_fields TBD Description (optional)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateCustomFields($account_id, $template_id, $template_custom_fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateCustomFieldsWithHttpInfo ($account_id, $template_id, $template_custom_fields);
        return $response; 
    }


    /**
     * updateCustomFieldsWithHttpInfo
     *
     * Updates envelope custom fields in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateCustomFields $template_custom_fields TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateCustomFieldsWithHttpInfo($account_id, $template_id, $template_custom_fields = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateCustomFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_custom_fields)) {
            $_tempBody = $template_custom_fields;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createCustomFields
     *
     * Creates custom document fields in an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateCustomFields $template_custom_fields TBD Description (optional)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createCustomFields($account_id, $template_id, $template_custom_fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createCustomFieldsWithHttpInfo ($account_id, $template_id, $template_custom_fields);
        return $response; 
    }


    /**
     * createCustomFieldsWithHttpInfo
     *
     * Creates custom document fields in an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateCustomFields $template_custom_fields TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createCustomFieldsWithHttpInfo($account_id, $template_id, $template_custom_fields = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createCustomFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling createCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_custom_fields)) {
            $_tempBody = $template_custom_fields;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteCustomFields
     *
     * Deletes envelope custom fields in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateCustomFields $template_custom_fields TBD Description (optional)
     * @return \DocuSign\eSign\Model\CustomFields
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteCustomFields($account_id, $template_id, $template_custom_fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteCustomFieldsWithHttpInfo ($account_id, $template_id, $template_custom_fields);
        return $response; 
    }


    /**
     * deleteCustomFieldsWithHttpInfo
     *
     * Deletes envelope custom fields in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateCustomFields $template_custom_fields TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\CustomFields, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteCustomFieldsWithHttpInfo($account_id, $template_id, $template_custom_fields = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteCustomFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/custom_fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_custom_fields)) {
            $_tempBody = $template_custom_fields;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\CustomFields'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\CustomFields', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\CustomFields', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listDocuments
     *
     * Gets a list of documents associated with a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return \DocuSign\eSign\Model\TemplateDocumentsResult
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocuments($account_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listDocumentsWithHttpInfo ($account_id, $template_id);
        return $response; 
    }


    /**
     * listDocumentsWithHttpInfo
     *
     * Gets a list of documents associated with a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\TemplateDocumentsResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocumentsWithHttpInfo($account_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listDocuments');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling listDocuments');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateDocumentsResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateDocumentsResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateDocumentsResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateDocuments
     *
     * Adds documents to a template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return \DocuSign\eSign\Model\TemplateDocumentsResult
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocuments($account_id, $template_id, $envelope_definition = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateDocumentsWithHttpInfo ($account_id, $template_id, $envelope_definition);
        return $response; 
    }


    /**
     * updateDocumentsWithHttpInfo
     *
     * Adds documents to a template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\TemplateDocumentsResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocumentsWithHttpInfo($account_id, $template_id, $envelope_definition = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateDocuments');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateDocuments');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_definition)) {
            $_tempBody = $envelope_definition;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateDocumentsResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateDocumentsResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateDocumentsResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteDocuments
     *
     * Deletes documents from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return \DocuSign\eSign\Model\TemplateDocumentsResult
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocuments($account_id, $template_id, $envelope_definition = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteDocumentsWithHttpInfo ($account_id, $template_id, $envelope_definition);
        return $response; 
    }


    /**
     * deleteDocumentsWithHttpInfo
     *
     * Deletes documents from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\EnvelopeDefinition $envelope_definition TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\TemplateDocumentsResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentsWithHttpInfo($account_id, $template_id, $envelope_definition = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDocuments');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteDocuments');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($envelope_definition)) {
            $_tempBody = $envelope_definition;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TemplateDocumentsResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TemplateDocumentsResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TemplateDocumentsResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getDocument
     *
     * Gets PDF documents from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return \SplFileObject
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getDocument($account_id, $template_id, $document_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getDocumentWithHttpInfo ($account_id, $template_id, $document_id);
        return $response; 
    }


    /**
     * getDocumentWithHttpInfo
     *
     * Gets PDF documents from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getDocumentWithHttpInfo($account_id, $template_id, $document_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getDocument');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling getDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling getDocument');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/pdf'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\SplFileObject'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listDocumentFields
     *
     * Gets the custom document fields for a an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocumentFields($account_id, $template_id, $document_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listDocumentFieldsWithHttpInfo ($account_id, $template_id, $document_id);
        return $response; 
    }


    /**
     * listDocumentFieldsWithHttpInfo
     *
     * Gets the custom document fields for a an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listDocumentFieldsWithHttpInfo($account_id, $template_id, $document_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listDocumentFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling listDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling listDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateDocumentFields
     *
     * Updates existing custom document fields in an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocumentFields($account_id, $template_id, $document_id, $document_fields_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateDocumentFieldsWithHttpInfo ($account_id, $template_id, $document_id, $document_fields_information);
        return $response; 
    }


    /**
     * updateDocumentFieldsWithHttpInfo
     *
     * Updates existing custom document fields in an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateDocumentFieldsWithHttpInfo($account_id, $template_id, $document_id, $document_fields_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateDocumentFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling updateDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_fields_information)) {
            $_tempBody = $document_fields_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createDocumentFields
     *
     * Creates custom document fields in an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createDocumentFields($account_id, $template_id, $document_id, $document_fields_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createDocumentFieldsWithHttpInfo ($account_id, $template_id, $document_id, $document_fields_information);
        return $response; 
    }


    /**
     * createDocumentFieldsWithHttpInfo
     *
     * Creates custom document fields in an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createDocumentFieldsWithHttpInfo($account_id, $template_id, $document_id, $document_fields_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createDocumentFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling createDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling createDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_fields_information)) {
            $_tempBody = $document_fields_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteDocumentFields
     *
     * Deletes custom document fields from an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\DocumentFieldsInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentFields($account_id, $template_id, $document_id, $document_fields_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteDocumentFieldsWithHttpInfo ($account_id, $template_id, $document_id, $document_fields_information);
        return $response; 
    }


    /**
     * deleteDocumentFieldsWithHttpInfo
     *
     * Deletes custom document fields from an existing template document.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param \DocuSign\eSign\Model\DocumentFieldsInformation $document_fields_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\DocumentFieldsInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentFieldsWithHttpInfo($account_id, $template_id, $document_id, $document_fields_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDocumentFields');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteDocumentFields');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deleteDocumentFields');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($document_fields_information)) {
            $_tempBody = $document_fields_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\DocumentFieldsInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\DocumentFieldsInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\DocumentFieldsInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteDocumentPage
     *
     * Deletes a page from a document in an template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param string $page_number The page number being accessed. (required) *
     @param \DocuSign\eSign\Model\PageRequest $page_request TBD Description (optional)
     * @return void
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentPage($account_id, $template_id, $document_id, $page_number, $page_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteDocumentPageWithHttpInfo ($account_id, $template_id, $document_id, $page_number, $page_request);
        return $response; 
    }


    /**
     * deleteDocumentPageWithHttpInfo
     *
     * Deletes a page from a document in an template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $document_id The ID of the document being accessed. (required) *
     @param string $page_number The page number being accessed. (required) *
     @param \DocuSign\eSign\Model\PageRequest $page_request TBD Description (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteDocumentPageWithHttpInfo($account_id, $template_id, $document_id, $page_number, $page_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDocumentPage');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteDocumentPage');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deleteDocumentPage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling deleteDocumentPage');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "documentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }// path params
        
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($page_request)) {
            $_tempBody = $page_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getLock
     *
     * Gets template lock information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return \DocuSign\eSign\Model\LockInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getLock($account_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getLockWithHttpInfo ($account_id, $template_id);
        return $response; 
    }


    /**
     * getLockWithHttpInfo
     *
     * Gets template lock information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\LockInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getLockWithHttpInfo($account_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getLock');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling getLock');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\LockInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\LockInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\LockInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getNotificationSettings
     *
     * Gets template notification information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return \DocuSign\eSign\Model\Notification
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getNotificationSettings($account_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getNotificationSettingsWithHttpInfo ($account_id, $template_id);
        return $response; 
    }


    /**
     * getNotificationSettingsWithHttpInfo
     *
     * Gets template notification information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getNotificationSettingsWithHttpInfo($account_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getNotificationSettings');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling getNotificationSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/notification";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Notification'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Notification', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Notification', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateNotificationSettings
     *
     * Updates the notification  structure for an existing template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateNotificationRequest $template_notification_request TBD Description (optional)
     * @return \DocuSign\eSign\Model\Notification
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateNotificationSettings($account_id, $template_id, $template_notification_request = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateNotificationSettingsWithHttpInfo ($account_id, $template_id, $template_notification_request);
        return $response; 
    }


    /**
     * updateNotificationSettingsWithHttpInfo
     *
     * Updates the notification  structure for an existing template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateNotificationRequest $template_notification_request TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateNotificationSettingsWithHttpInfo($account_id, $template_id, $template_notification_request = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateNotificationSettings');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateNotificationSettings');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/notification";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_notification_request)) {
            $_tempBody = $template_notification_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Notification'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Notification', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Notification', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listRecipients
     *
     * Gets recipient information from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listRecipients($account_id, $template_id)
    {
        list($response, $statusCode, $httpHeader) = $this->listRecipientsWithHttpInfo ($account_id, $template_id);
        return $response; 
    }


    /**
     * listRecipientsWithHttpInfo
     *
     * Gets recipient information from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listRecipientsWithHttpInfo($account_id, $template_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listRecipients');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling listRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateRecipients
     *
     * Updates recipients in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\RecipientsUpdateSummary
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateRecipients($account_id, $template_id, $template_recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateRecipientsWithHttpInfo ($account_id, $template_id, $template_recipients);
        return $response; 
    }


    /**
     * updateRecipientsWithHttpInfo
     *
     * Updates recipients in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\RecipientsUpdateSummary, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateRecipientsWithHttpInfo($account_id, $template_id, $template_recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateRecipients');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_recipients)) {
            $_tempBody = $template_recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\RecipientsUpdateSummary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\RecipientsUpdateSummary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\RecipientsUpdateSummary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createRecipients
     *
     * Adds tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createRecipients($account_id, $template_id, $template_recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createRecipientsWithHttpInfo ($account_id, $template_id, $template_recipients);
        return $response; 
    }


    /**
     * createRecipientsWithHttpInfo
     *
     * Adds tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createRecipientsWithHttpInfo($account_id, $template_id, $template_recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createRecipients');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling createRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_recipients)) {
            $_tempBody = $template_recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteRecipients
     *
     * Deletes recipients from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipients($account_id, $template_id, $template_recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteRecipientsWithHttpInfo ($account_id, $template_id, $template_recipients);
        return $response; 
    }


    /**
     * deleteRecipientsWithHttpInfo
     *
     * Deletes recipients from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipientsWithHttpInfo($account_id, $template_id, $template_recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteRecipients');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteRecipients');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_recipients)) {
            $_tempBody = $template_recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteRecipient
     *
     * Deletes the specified recipient file from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return \DocuSign\eSign\Model\Recipients
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipient($account_id, $template_id, $recipient_id, $template_recipients = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteRecipientWithHttpInfo ($account_id, $template_id, $recipient_id, $template_recipients);
        return $response; 
    }


    /**
     * deleteRecipientWithHttpInfo
     *
     * Deletes the specified recipient file from a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateRecipients $template_recipients TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Recipients, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteRecipientWithHttpInfo($account_id, $template_id, $recipient_id, $template_recipients = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteRecipient');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteRecipient');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling deleteRecipient');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_recipients)) {
            $_tempBody = $template_recipients;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Recipients'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Recipients', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Recipients', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listTabs
     *
     * Gets the tabs information for a signer or sign-in-person recipient in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTabs($account_id, $template_id, $recipient_id, $tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listTabsWithHttpInfo ($account_id, $template_id, $recipient_id, $tabs);
        return $response; 
    }


    /**
     * listTabsWithHttpInfo
     *
     * Gets the tabs information for a signer or sign-in-person recipient in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\Tabs $tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listTabsWithHttpInfo($account_id, $template_id, $recipient_id, $tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listTabs');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling listTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling listTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tabs)) {
            $_tempBody = $tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateTabs
     *
     * Updates the tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateTabs $template_tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateTabs($account_id, $template_id, $recipient_id, $template_tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateTabsWithHttpInfo ($account_id, $template_id, $recipient_id, $template_tabs);
        return $response; 
    }


    /**
     * updateTabsWithHttpInfo
     *
     * Updates the tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateTabs $template_tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateTabsWithHttpInfo($account_id, $template_id, $recipient_id, $template_tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateTabs');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling updateTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_tabs)) {
            $_tempBody = $template_tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createTabs
     *
     * Adds tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateTabs $template_tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createTabs($account_id, $template_id, $recipient_id, $template_tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createTabsWithHttpInfo ($account_id, $template_id, $recipient_id, $template_tabs);
        return $response; 
    }


    /**
     * createTabsWithHttpInfo
     *
     * Adds tabs for a recipient.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateTabs $template_tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createTabsWithHttpInfo($account_id, $template_id, $recipient_id, $template_tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createTabs');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling createTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling createTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_tabs)) {
            $_tempBody = $template_tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteTabs
     *
     * Deletes the tabs associated with a recipient in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateTabs $template_tabs TBD Description (optional)
     * @return \DocuSign\eSign\Model\Tabs
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteTabs($account_id, $template_id, $recipient_id, $template_tabs = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteTabsWithHttpInfo ($account_id, $template_id, $recipient_id, $template_tabs);
        return $response; 
    }


    /**
     * deleteTabsWithHttpInfo
     *
     * Deletes the tabs associated with a recipient in a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $recipient_id The ID of the recipient being accessed. (required) *
     @param \DocuSign\eSign\Model\TemplateTabs $template_tabs TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\Tabs, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteTabsWithHttpInfo($account_id, $template_id, $recipient_id, $template_tabs = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteTabs');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteTabs');
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recipient_id when calling deleteTabs');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                "{" . "recipientId" . "}",
                $this->apiClient->getSerializer()->toPathValue($recipient_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($template_tabs)) {
            $_tempBody = $template_tabs;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\Tabs'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\Tabs', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\Tabs', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateGroupShare
     *
     * Shares a template with a group
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $template_part Currently, the only defined part is **groups**. (required) *
     @param \DocuSign\eSign\Model\GroupInformation $group_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\GroupInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateGroupShare($account_id, $template_id, $template_part, $group_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateGroupShareWithHttpInfo ($account_id, $template_id, $template_part, $group_information);
        return $response; 
    }


    /**
     * updateGroupShareWithHttpInfo
     *
     * Shares a template with a group
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $template_part Currently, the only defined part is **groups**. (required) *
     @param \DocuSign\eSign\Model\GroupInformation $group_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\GroupInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateGroupShareWithHttpInfo($account_id, $template_id, $template_part, $group_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateGroupShare');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling updateGroupShare');
        }
        // verify the required parameter 'template_part' is set
        if ($template_part === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_part when calling updateGroupShare');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/{templatePart}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($template_part !== null) {
            $resourcePath = str_replace(
                "{" . "templatePart" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_part),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($group_information)) {
            $_tempBody = $group_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\GroupInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\GroupInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\GroupInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteGroupShare
     *
     * Removes a member group's sharing permissions for a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $template_part Currently, the only defined part is **groups**. (required) *
     @param \DocuSign\eSign\Model\GroupInformation $group_information TBD Description (optional)
     * @return \DocuSign\eSign\Model\GroupInformation
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteGroupShare($account_id, $template_id, $template_part, $group_information = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteGroupShareWithHttpInfo ($account_id, $template_id, $template_part, $group_information);
        return $response; 
    }


    /**
     * deleteGroupShareWithHttpInfo
     *
     * Removes a member group's sharing permissions for a template.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $template_id The ID of the template being accessed. (required) *
     @param string $template_part Currently, the only defined part is **groups**. (required) *
     @param \DocuSign\eSign\Model\GroupInformation $group_information TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\GroupInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteGroupShareWithHttpInfo($account_id, $template_id, $template_part, $group_information = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteGroupShare');
        }
        // verify the required parameter 'template_id' is set
        if ($template_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_id when calling deleteGroupShare');
        }
        // verify the required parameter 'template_part' is set
        if ($template_part === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template_part when calling deleteGroupShare');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/templates/{templateId}/{templatePart}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($template_id !== null) {
            $resourcePath = str_replace(
                "{" . "templateId" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_id),
                $resourcePath
            );
        }// path params
        
        if ($template_part !== null) {
            $resourcePath = str_replace(
                "{" . "templatePart" . "}",
                $this->apiClient->getSerializer()->toPathValue($template_part),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($group_information)) {
            $_tempBody = $group_information;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\GroupInformation'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\GroupInformation', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\GroupInformation', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
