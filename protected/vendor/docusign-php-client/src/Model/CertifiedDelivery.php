<?php
/**
 * CertifiedDelivery
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * CertifiedDelivery Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CertifiedDelivery implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'excluded_documents' => 'string[]',
        'name' => 'string',
        'email' => 'string',
        'email_recipient_post_signing_url' => 'string',
        'signing_group_id' => 'string',
        'signing_group_name' => 'string',
        'signing_group_users' => '\DocuSign\eSign\Model\UserInfo[]',
        'recipient_id' => 'string',
        'recipient_id_guid' => 'string',
        'access_code' => 'string',
        'add_access_code_to_email' => 'string',
        'require_id_lookup' => 'string',
        'id_check_configuration_name' => 'string',
        'social_authentications' => '\DocuSign\eSign\Model\SocialAuthentication[]',
        'phone_authentication' => '\DocuSign\eSign\Model\RecipientPhoneAuthentication',
        'saml_authentication' => '\DocuSign\eSign\Model\RecipientSAMLAuthentication',
        'sms_authentication' => '\DocuSign\eSign\Model\RecipientSMSAuthentication',
        'user_id' => 'string',
        'client_user_id' => 'string',
        'embedded_recipient_start_url' => 'string',
        'custom_fields' => 'string[]',
        'routing_order' => 'string',
        'id_check_information_input' => '\DocuSign\eSign\Model\IdCheckInformationInput',
        'recipient_attachments' => '\DocuSign\eSign\Model\Attachment[]',
        'note' => 'string',
        'role_name' => 'string',
        'status' => 'string',
        'signed_date_time' => 'string',
        'delivered_date_time' => 'string',
        'declined_date_time' => 'string',
        'sent_date_time' => 'string',
        'declined_reason' => 'string',
        'delivery_method' => 'string',
        'fax_number' => 'string',
        'template_locked' => 'string',
        'template_required' => 'string',
        'email_notification' => '\DocuSign\eSign\Model\RecipientEmailNotification',
        'inherit_email_notification_configuration' => 'string',
        'error_details' => '\DocuSign\eSign\Model\ErrorDetails',
        'recipient_authentication_status' => '\DocuSign\eSign\Model\AuthenticationStatus',
        'total_tab_count' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'excluded_documents' => 'excludedDocuments',
        'name' => 'name',
        'email' => 'email',
        'email_recipient_post_signing_url' => 'emailRecipientPostSigningURL',
        'signing_group_id' => 'signingGroupId',
        'signing_group_name' => 'signingGroupName',
        'signing_group_users' => 'signingGroupUsers',
        'recipient_id' => 'recipientId',
        'recipient_id_guid' => 'recipientIdGuid',
        'access_code' => 'accessCode',
        'add_access_code_to_email' => 'addAccessCodeToEmail',
        'require_id_lookup' => 'requireIdLookup',
        'id_check_configuration_name' => 'idCheckConfigurationName',
        'social_authentications' => 'socialAuthentications',
        'phone_authentication' => 'phoneAuthentication',
        'saml_authentication' => 'samlAuthentication',
        'sms_authentication' => 'smsAuthentication',
        'user_id' => 'userId',
        'client_user_id' => 'clientUserId',
        'embedded_recipient_start_url' => 'embeddedRecipientStartURL',
        'custom_fields' => 'customFields',
        'routing_order' => 'routingOrder',
        'id_check_information_input' => 'idCheckInformationInput',
        'recipient_attachments' => 'recipientAttachments',
        'note' => 'note',
        'role_name' => 'roleName',
        'status' => 'status',
        'signed_date_time' => 'signedDateTime',
        'delivered_date_time' => 'deliveredDateTime',
        'declined_date_time' => 'declinedDateTime',
        'sent_date_time' => 'sentDateTime',
        'declined_reason' => 'declinedReason',
        'delivery_method' => 'deliveryMethod',
        'fax_number' => 'faxNumber',
        'template_locked' => 'templateLocked',
        'template_required' => 'templateRequired',
        'email_notification' => 'emailNotification',
        'inherit_email_notification_configuration' => 'inheritEmailNotificationConfiguration',
        'error_details' => 'errorDetails',
        'recipient_authentication_status' => 'recipientAuthenticationStatus',
        'total_tab_count' => 'totalTabCount'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'excluded_documents' => 'setExcludedDocuments',
        'name' => 'setName',
        'email' => 'setEmail',
        'email_recipient_post_signing_url' => 'setEmailRecipientPostSigningUrl',
        'signing_group_id' => 'setSigningGroupId',
        'signing_group_name' => 'setSigningGroupName',
        'signing_group_users' => 'setSigningGroupUsers',
        'recipient_id' => 'setRecipientId',
        'recipient_id_guid' => 'setRecipientIdGuid',
        'access_code' => 'setAccessCode',
        'add_access_code_to_email' => 'setAddAccessCodeToEmail',
        'require_id_lookup' => 'setRequireIdLookup',
        'id_check_configuration_name' => 'setIdCheckConfigurationName',
        'social_authentications' => 'setSocialAuthentications',
        'phone_authentication' => 'setPhoneAuthentication',
        'saml_authentication' => 'setSamlAuthentication',
        'sms_authentication' => 'setSmsAuthentication',
        'user_id' => 'setUserId',
        'client_user_id' => 'setClientUserId',
        'embedded_recipient_start_url' => 'setEmbeddedRecipientStartUrl',
        'custom_fields' => 'setCustomFields',
        'routing_order' => 'setRoutingOrder',
        'id_check_information_input' => 'setIdCheckInformationInput',
        'recipient_attachments' => 'setRecipientAttachments',
        'note' => 'setNote',
        'role_name' => 'setRoleName',
        'status' => 'setStatus',
        'signed_date_time' => 'setSignedDateTime',
        'delivered_date_time' => 'setDeliveredDateTime',
        'declined_date_time' => 'setDeclinedDateTime',
        'sent_date_time' => 'setSentDateTime',
        'declined_reason' => 'setDeclinedReason',
        'delivery_method' => 'setDeliveryMethod',
        'fax_number' => 'setFaxNumber',
        'template_locked' => 'setTemplateLocked',
        'template_required' => 'setTemplateRequired',
        'email_notification' => 'setEmailNotification',
        'inherit_email_notification_configuration' => 'setInheritEmailNotificationConfiguration',
        'error_details' => 'setErrorDetails',
        'recipient_authentication_status' => 'setRecipientAuthenticationStatus',
        'total_tab_count' => 'setTotalTabCount'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'excluded_documents' => 'getExcludedDocuments',
        'name' => 'getName',
        'email' => 'getEmail',
        'email_recipient_post_signing_url' => 'getEmailRecipientPostSigningUrl',
        'signing_group_id' => 'getSigningGroupId',
        'signing_group_name' => 'getSigningGroupName',
        'signing_group_users' => 'getSigningGroupUsers',
        'recipient_id' => 'getRecipientId',
        'recipient_id_guid' => 'getRecipientIdGuid',
        'access_code' => 'getAccessCode',
        'add_access_code_to_email' => 'getAddAccessCodeToEmail',
        'require_id_lookup' => 'getRequireIdLookup',
        'id_check_configuration_name' => 'getIdCheckConfigurationName',
        'social_authentications' => 'getSocialAuthentications',
        'phone_authentication' => 'getPhoneAuthentication',
        'saml_authentication' => 'getSamlAuthentication',
        'sms_authentication' => 'getSmsAuthentication',
        'user_id' => 'getUserId',
        'client_user_id' => 'getClientUserId',
        'embedded_recipient_start_url' => 'getEmbeddedRecipientStartUrl',
        'custom_fields' => 'getCustomFields',
        'routing_order' => 'getRoutingOrder',
        'id_check_information_input' => 'getIdCheckInformationInput',
        'recipient_attachments' => 'getRecipientAttachments',
        'note' => 'getNote',
        'role_name' => 'getRoleName',
        'status' => 'getStatus',
        'signed_date_time' => 'getSignedDateTime',
        'delivered_date_time' => 'getDeliveredDateTime',
        'declined_date_time' => 'getDeclinedDateTime',
        'sent_date_time' => 'getSentDateTime',
        'declined_reason' => 'getDeclinedReason',
        'delivery_method' => 'getDeliveryMethod',
        'fax_number' => 'getFaxNumber',
        'template_locked' => 'getTemplateLocked',
        'template_required' => 'getTemplateRequired',
        'email_notification' => 'getEmailNotification',
        'inherit_email_notification_configuration' => 'getInheritEmailNotificationConfiguration',
        'error_details' => 'getErrorDetails',
        'recipient_authentication_status' => 'getRecipientAuthenticationStatus',
        'total_tab_count' => 'getTotalTabCount'
    );
  
    
    /**
      * $excluded_documents Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
      * @var string[]
      */
    protected $excluded_documents;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $email 
      * @var string
      */
    protected $email;
    
    /**
      * $email_recipient_post_signing_url 
      * @var string
      */
    protected $email_recipient_post_signing_url;
    
    /**
      * $signing_group_id When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
      * @var string
      */
    protected $signing_group_id;
    
    /**
      * $signing_group_name The display name for the signing group. \n\nMaximum Length: 100 characters.
      * @var string
      */
    protected $signing_group_name;
    
    /**
      * $signing_group_users A complex type that contains information about users in the signing group.
      * @var \DocuSign\eSign\Model\UserInfo[]
      */
    protected $signing_group_users;
    
    /**
      * $recipient_id Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
      * @var string
      */
    protected $recipient_id;
    
    /**
      * $recipient_id_guid 
      * @var string
      */
    protected $recipient_id_guid;
    
    /**
      * $access_code If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and must conform to account’s access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then access code is not required.
      * @var string
      */
    protected $access_code;
    
    /**
      * $add_access_code_to_email This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
      * @var string
      */
    protected $add_access_code_to_email;
    
    /**
      * $require_id_lookup When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
      * @var string
      */
    protected $require_id_lookup;
    
    /**
      * $id_check_configuration_name Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.\n\n*Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
      * @var string
      */
    protected $id_check_configuration_name;
    
    /**
      * $social_authentications Lists the social ID type that can be used for recipient authentication.
      * @var \DocuSign\eSign\Model\SocialAuthentication[]
      */
    protected $social_authentications;
    
    /**
      * $phone_authentication 
      * @var \DocuSign\eSign\Model\RecipientPhoneAuthentication
      */
    protected $phone_authentication;
    
    /**
      * $saml_authentication 
      * @var \DocuSign\eSign\Model\RecipientSAMLAuthentication
      */
    protected $saml_authentication;
    
    /**
      * $sms_authentication 
      * @var \DocuSign\eSign\Model\RecipientSMSAuthentication
      */
    protected $sms_authentication;
    
    /**
      * $user_id 
      * @var string
      */
    protected $user_id;
    
    /**
      * $client_user_id Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.ng. \n\nMaximum length: 100 characters.
      * @var string
      */
    protected $client_user_id;
    
    /**
      * $embedded_recipient_start_url Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender’s system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.\n\nIt is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient’s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
      * @var string
      */
    protected $embedded_recipient_start_url;
    
    /**
      * $custom_fields An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
      * @var string[]
      */
    protected $custom_fields;
    
    /**
      * $routing_order Specifies the routing order of the recipient in the envelope.
      * @var string
      */
    protected $routing_order;
    
    /**
      * $id_check_information_input 
      * @var \DocuSign\eSign\Model\IdCheckInformationInput
      */
    protected $id_check_information_input;
    
    /**
      * $recipient_attachments Reserved:
      * @var \DocuSign\eSign\Model\Attachment[]
      */
    protected $recipient_attachments;
    
    /**
      * $note Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.\n\nMaximum Length: 1000 characters.
      * @var string
      */
    protected $note;
    
    /**
      * $role_name Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
      * @var string
      */
    protected $role_name;
    
    /**
      * $status Indicates the envelope status. Valid values are:\n\n* sent - The envelope is sent to the recipients. \n* created - The envelope is saved as a draft and can be modified and sent later.
      * @var string
      */
    protected $status;
    
    /**
      * $signed_date_time Reserved: For DocuSign use only.
      * @var string
      */
    protected $signed_date_time;
    
    /**
      * $delivered_date_time Reserved: For DocuSign use only.
      * @var string
      */
    protected $delivered_date_time;
    
    /**
      * $declined_date_time The date and time the recipient declined the document.
      * @var string
      */
    protected $declined_date_time;
    
    /**
      * $sent_date_time The date and time the envelope was sent.
      * @var string
      */
    protected $sent_date_time;
    
    /**
      * $declined_reason The reason the recipient declined the document.
      * @var string
      */
    protected $declined_reason;
    
    /**
      * $delivery_method Reserved: For DocuSign use only.
      * @var string
      */
    protected $delivery_method;
    
    /**
      * $fax_number Reserved:
      * @var string
      */
    protected $fax_number;
    
    /**
      * $template_locked When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
      * @var string
      */
    protected $template_locked;
    
    /**
      * $template_required When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
      * @var string
      */
    protected $template_required;
    
    /**
      * $email_notification 
      * @var \DocuSign\eSign\Model\RecipientEmailNotification
      */
    protected $email_notification;
    
    /**
      * $inherit_email_notification_configuration When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
      * @var string
      */
    protected $inherit_email_notification_configuration;
    
    /**
      * $error_details 
      * @var \DocuSign\eSign\Model\ErrorDetails
      */
    protected $error_details;
    
    /**
      * $recipient_authentication_status 
      * @var \DocuSign\eSign\Model\AuthenticationStatus
      */
    protected $recipient_authentication_status;
    
    /**
      * $total_tab_count 
      * @var string
      */
    protected $total_tab_count;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->excluded_documents = $data["excluded_documents"];
            $this->name = $data["name"];
            $this->email = $data["email"];
            $this->email_recipient_post_signing_url = $data["email_recipient_post_signing_url"];
            $this->signing_group_id = $data["signing_group_id"];
            $this->signing_group_name = $data["signing_group_name"];
            $this->signing_group_users = $data["signing_group_users"];
            $this->recipient_id = $data["recipient_id"];
            $this->recipient_id_guid = $data["recipient_id_guid"];
            $this->access_code = $data["access_code"];
            $this->add_access_code_to_email = $data["add_access_code_to_email"];
            $this->require_id_lookup = $data["require_id_lookup"];
            $this->id_check_configuration_name = $data["id_check_configuration_name"];
            $this->social_authentications = $data["social_authentications"];
            $this->phone_authentication = $data["phone_authentication"];
            $this->saml_authentication = $data["saml_authentication"];
            $this->sms_authentication = $data["sms_authentication"];
            $this->user_id = $data["user_id"];
            $this->client_user_id = $data["client_user_id"];
            $this->embedded_recipient_start_url = $data["embedded_recipient_start_url"];
            $this->custom_fields = $data["custom_fields"];
            $this->routing_order = $data["routing_order"];
            $this->id_check_information_input = $data["id_check_information_input"];
            $this->recipient_attachments = $data["recipient_attachments"];
            $this->note = $data["note"];
            $this->role_name = $data["role_name"];
            $this->status = $data["status"];
            $this->signed_date_time = $data["signed_date_time"];
            $this->delivered_date_time = $data["delivered_date_time"];
            $this->declined_date_time = $data["declined_date_time"];
            $this->sent_date_time = $data["sent_date_time"];
            $this->declined_reason = $data["declined_reason"];
            $this->delivery_method = $data["delivery_method"];
            $this->fax_number = $data["fax_number"];
            $this->template_locked = $data["template_locked"];
            $this->template_required = $data["template_required"];
            $this->email_notification = $data["email_notification"];
            $this->inherit_email_notification_configuration = $data["inherit_email_notification_configuration"];
            $this->error_details = $data["error_details"];
            $this->recipient_authentication_status = $data["recipient_authentication_status"];
            $this->total_tab_count = $data["total_tab_count"];
        }
    }
    
    /**
     * Gets excluded_documents
     * @return string[]
     */
    public function getExcludedDocuments()
    {
        return $this->excluded_documents;
    }
  
    /**
     * Sets excluded_documents
     * @param string[] $excluded_documents Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.\n\nWhen enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
     * @return $this
     */
    public function setExcludedDocuments($excluded_documents)
    {
        
        $this->excluded_documents = $excluded_documents;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets email_recipient_post_signing_url
     * @return string
     */
    public function getEmailRecipientPostSigningUrl()
    {
        return $this->email_recipient_post_signing_url;
    }
  
    /**
     * Sets email_recipient_post_signing_url
     * @param string $email_recipient_post_signing_url 
     * @return $this
     */
    public function setEmailRecipientPostSigningUrl($email_recipient_post_signing_url)
    {
        
        $this->email_recipient_post_signing_url = $email_recipient_post_signing_url;
        return $this;
    }
    
    /**
     * Gets signing_group_id
     * @return string
     */
    public function getSigningGroupId()
    {
        return $this->signing_group_id;
    }
  
    /**
     * Sets signing_group_id
     * @param string $signing_group_id When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
     * @return $this
     */
    public function setSigningGroupId($signing_group_id)
    {
        
        $this->signing_group_id = $signing_group_id;
        return $this;
    }
    
    /**
     * Gets signing_group_name
     * @return string
     */
    public function getSigningGroupName()
    {
        return $this->signing_group_name;
    }
  
    /**
     * Sets signing_group_name
     * @param string $signing_group_name The display name for the signing group. \n\nMaximum Length: 100 characters.
     * @return $this
     */
    public function setSigningGroupName($signing_group_name)
    {
        
        $this->signing_group_name = $signing_group_name;
        return $this;
    }
    
    /**
     * Gets signing_group_users
     * @return \DocuSign\eSign\Model\UserInfo[]
     */
    public function getSigningGroupUsers()
    {
        return $this->signing_group_users;
    }
  
    /**
     * Sets signing_group_users
     * @param \DocuSign\eSign\Model\UserInfo[] $signing_group_users A complex type that contains information about users in the signing group.
     * @return $this
     */
    public function setSigningGroupUsers($signing_group_users)
    {
        
        $this->signing_group_users = $signing_group_users;
        return $this;
    }
    
    /**
     * Gets recipient_id
     * @return string
     */
    public function getRecipientId()
    {
        return $this->recipient_id;
    }
  
    /**
     * Sets recipient_id
     * @param string $recipient_id Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
     * @return $this
     */
    public function setRecipientId($recipient_id)
    {
        
        $this->recipient_id = $recipient_id;
        return $this;
    }
    
    /**
     * Gets recipient_id_guid
     * @return string
     */
    public function getRecipientIdGuid()
    {
        return $this->recipient_id_guid;
    }
  
    /**
     * Sets recipient_id_guid
     * @param string $recipient_id_guid 
     * @return $this
     */
    public function setRecipientIdGuid($recipient_id_guid)
    {
        
        $this->recipient_id_guid = $recipient_id_guid;
        return $this;
    }
    
    /**
     * Gets access_code
     * @return string
     */
    public function getAccessCode()
    {
        return $this->access_code;
    }
  
    /**
     * Sets access_code
     * @param string $access_code If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and must conform to account’s access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then access code is not required.
     * @return $this
     */
    public function setAccessCode($access_code)
    {
        
        $this->access_code = $access_code;
        return $this;
    }
    
    /**
     * Gets add_access_code_to_email
     * @return string
     */
    public function getAddAccessCodeToEmail()
    {
        return $this->add_access_code_to_email;
    }
  
    /**
     * Sets add_access_code_to_email
     * @param string $add_access_code_to_email This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
     * @return $this
     */
    public function setAddAccessCodeToEmail($add_access_code_to_email)
    {
        
        $this->add_access_code_to_email = $add_access_code_to_email;
        return $this;
    }
    
    /**
     * Gets require_id_lookup
     * @return string
     */
    public function getRequireIdLookup()
    {
        return $this->require_id_lookup;
    }
  
    /**
     * Sets require_id_lookup
     * @param string $require_id_lookup When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.
     * @return $this
     */
    public function setRequireIdLookup($require_id_lookup)
    {
        
        $this->require_id_lookup = $require_id_lookup;
        return $this;
    }
    
    /**
     * Gets id_check_configuration_name
     * @return string
     */
    public function getIdCheckConfigurationName()
    {
        return $this->id_check_configuration_name;
    }
  
    /**
     * Sets id_check_configuration_name
     * @param string $id_check_configuration_name Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.\n\n*Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the idCheckConfigurationName should be 'ID Check '. If you wanted to use SMS, it would be 'SMS Auth $' and you would need to add you would need to add phone number information to the `smsAuthentication` node.
     * @return $this
     */
    public function setIdCheckConfigurationName($id_check_configuration_name)
    {
        
        $this->id_check_configuration_name = $id_check_configuration_name;
        return $this;
    }
    
    /**
     * Gets social_authentications
     * @return \DocuSign\eSign\Model\SocialAuthentication[]
     */
    public function getSocialAuthentications()
    {
        return $this->social_authentications;
    }
  
    /**
     * Sets social_authentications
     * @param \DocuSign\eSign\Model\SocialAuthentication[] $social_authentications Lists the social ID type that can be used for recipient authentication.
     * @return $this
     */
    public function setSocialAuthentications($social_authentications)
    {
        
        $this->social_authentications = $social_authentications;
        return $this;
    }
    
    /**
     * Gets phone_authentication
     * @return \DocuSign\eSign\Model\RecipientPhoneAuthentication
     */
    public function getPhoneAuthentication()
    {
        return $this->phone_authentication;
    }
  
    /**
     * Sets phone_authentication
     * @param \DocuSign\eSign\Model\RecipientPhoneAuthentication $phone_authentication 
     * @return $this
     */
    public function setPhoneAuthentication($phone_authentication)
    {
        
        $this->phone_authentication = $phone_authentication;
        return $this;
    }
    
    /**
     * Gets saml_authentication
     * @return \DocuSign\eSign\Model\RecipientSAMLAuthentication
     */
    public function getSamlAuthentication()
    {
        return $this->saml_authentication;
    }
  
    /**
     * Sets saml_authentication
     * @param \DocuSign\eSign\Model\RecipientSAMLAuthentication $saml_authentication 
     * @return $this
     */
    public function setSamlAuthentication($saml_authentication)
    {
        
        $this->saml_authentication = $saml_authentication;
        return $this;
    }
    
    /**
     * Gets sms_authentication
     * @return \DocuSign\eSign\Model\RecipientSMSAuthentication
     */
    public function getSmsAuthentication()
    {
        return $this->sms_authentication;
    }
  
    /**
     * Sets sms_authentication
     * @param \DocuSign\eSign\Model\RecipientSMSAuthentication $sms_authentication 
     * @return $this
     */
    public function setSmsAuthentication($sms_authentication)
    {
        
        $this->sms_authentication = $sms_authentication;
        return $this;
    }
    
    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->user_id;
    }
  
    /**
     * Sets user_id
     * @param string $user_id 
     * @return $this
     */
    public function setUserId($user_id)
    {
        
        $this->user_id = $user_id;
        return $this;
    }
    
    /**
     * Gets client_user_id
     * @return string
     */
    public function getClientUserId()
    {
        return $this->client_user_id;
    }
  
    /**
     * Sets client_user_id
     * @param string $client_user_id Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.ng. \n\nMaximum length: 100 characters.
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        
        $this->client_user_id = $client_user_id;
        return $this;
    }
    
    /**
     * Gets embedded_recipient_start_url
     * @return string
     */
    public function getEmbeddedRecipientStartUrl()
    {
        return $this->embedded_recipient_start_url;
    }
  
    /**
     * Sets embedded_recipient_start_url
     * @param string $embedded_recipient_start_url Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender’s system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.\n\nIt is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient’s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     * @return $this
     */
    public function setEmbeddedRecipientStartUrl($embedded_recipient_start_url)
    {
        
        $this->embedded_recipient_start_url = $embedded_recipient_start_url;
        return $this;
    }
    
    /**
     * Gets custom_fields
     * @return string[]
     */
    public function getCustomFields()
    {
        return $this->custom_fields;
    }
  
    /**
     * Sets custom_fields
     * @param string[] $custom_fields An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->custom_fields = $custom_fields;
        return $this;
    }
    
    /**
     * Gets routing_order
     * @return string
     */
    public function getRoutingOrder()
    {
        return $this->routing_order;
    }
  
    /**
     * Sets routing_order
     * @param string $routing_order Specifies the routing order of the recipient in the envelope.
     * @return $this
     */
    public function setRoutingOrder($routing_order)
    {
        
        $this->routing_order = $routing_order;
        return $this;
    }
    
    /**
     * Gets id_check_information_input
     * @return \DocuSign\eSign\Model\IdCheckInformationInput
     */
    public function getIdCheckInformationInput()
    {
        return $this->id_check_information_input;
    }
  
    /**
     * Sets id_check_information_input
     * @param \DocuSign\eSign\Model\IdCheckInformationInput $id_check_information_input 
     * @return $this
     */
    public function setIdCheckInformationInput($id_check_information_input)
    {
        
        $this->id_check_information_input = $id_check_information_input;
        return $this;
    }
    
    /**
     * Gets recipient_attachments
     * @return \DocuSign\eSign\Model\Attachment[]
     */
    public function getRecipientAttachments()
    {
        return $this->recipient_attachments;
    }
  
    /**
     * Sets recipient_attachments
     * @param \DocuSign\eSign\Model\Attachment[] $recipient_attachments Reserved:
     * @return $this
     */
    public function setRecipientAttachments($recipient_attachments)
    {
        
        $this->recipient_attachments = $recipient_attachments;
        return $this;
    }
    
    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->note;
    }
  
    /**
     * Sets note
     * @param string $note Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.\n\nMaximum Length: 1000 characters.
     * @return $this
     */
    public function setNote($note)
    {
        
        $this->note = $note;
        return $this;
    }
    
    /**
     * Gets role_name
     * @return string
     */
    public function getRoleName()
    {
        return $this->role_name;
    }
  
    /**
     * Sets role_name
     * @param string $role_name Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
     * @return $this
     */
    public function setRoleName($role_name)
    {
        
        $this->role_name = $role_name;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status Indicates the envelope status. Valid values are:\n\n* sent - The envelope is sent to the recipients. \n* created - The envelope is saved as a draft and can be modified and sent later.
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets signed_date_time
     * @return string
     */
    public function getSignedDateTime()
    {
        return $this->signed_date_time;
    }
  
    /**
     * Sets signed_date_time
     * @param string $signed_date_time Reserved: For DocuSign use only.
     * @return $this
     */
    public function setSignedDateTime($signed_date_time)
    {
        
        $this->signed_date_time = $signed_date_time;
        return $this;
    }
    
    /**
     * Gets delivered_date_time
     * @return string
     */
    public function getDeliveredDateTime()
    {
        return $this->delivered_date_time;
    }
  
    /**
     * Sets delivered_date_time
     * @param string $delivered_date_time Reserved: For DocuSign use only.
     * @return $this
     */
    public function setDeliveredDateTime($delivered_date_time)
    {
        
        $this->delivered_date_time = $delivered_date_time;
        return $this;
    }
    
    /**
     * Gets declined_date_time
     * @return string
     */
    public function getDeclinedDateTime()
    {
        return $this->declined_date_time;
    }
  
    /**
     * Sets declined_date_time
     * @param string $declined_date_time The date and time the recipient declined the document.
     * @return $this
     */
    public function setDeclinedDateTime($declined_date_time)
    {
        
        $this->declined_date_time = $declined_date_time;
        return $this;
    }
    
    /**
     * Gets sent_date_time
     * @return string
     */
    public function getSentDateTime()
    {
        return $this->sent_date_time;
    }
  
    /**
     * Sets sent_date_time
     * @param string $sent_date_time The date and time the envelope was sent.
     * @return $this
     */
    public function setSentDateTime($sent_date_time)
    {
        
        $this->sent_date_time = $sent_date_time;
        return $this;
    }
    
    /**
     * Gets declined_reason
     * @return string
     */
    public function getDeclinedReason()
    {
        return $this->declined_reason;
    }
  
    /**
     * Sets declined_reason
     * @param string $declined_reason The reason the recipient declined the document.
     * @return $this
     */
    public function setDeclinedReason($declined_reason)
    {
        
        $this->declined_reason = $declined_reason;
        return $this;
    }
    
    /**
     * Gets delivery_method
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->delivery_method;
    }
  
    /**
     * Sets delivery_method
     * @param string $delivery_method Reserved: For DocuSign use only.
     * @return $this
     */
    public function setDeliveryMethod($delivery_method)
    {
        
        $this->delivery_method = $delivery_method;
        return $this;
    }
    
    /**
     * Gets fax_number
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->fax_number;
    }
  
    /**
     * Sets fax_number
     * @param string $fax_number Reserved:
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        
        $this->fax_number = $fax_number;
        return $this;
    }
    
    /**
     * Gets template_locked
     * @return string
     */
    public function getTemplateLocked()
    {
        return $this->template_locked;
    }
  
    /**
     * Sets template_locked
     * @param string $template_locked When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.
     * @return $this
     */
    public function setTemplateLocked($template_locked)
    {
        
        $this->template_locked = $template_locked;
        return $this;
    }
    
    /**
     * Gets template_required
     * @return string
     */
    public function getTemplateRequired()
    {
        return $this->template_required;
    }
  
    /**
     * Sets template_required
     * @param string $template_required When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
     * @return $this
     */
    public function setTemplateRequired($template_required)
    {
        
        $this->template_required = $template_required;
        return $this;
    }
    
    /**
     * Gets email_notification
     * @return \DocuSign\eSign\Model\RecipientEmailNotification
     */
    public function getEmailNotification()
    {
        return $this->email_notification;
    }
  
    /**
     * Sets email_notification
     * @param \DocuSign\eSign\Model\RecipientEmailNotification $email_notification 
     * @return $this
     */
    public function setEmailNotification($email_notification)
    {
        
        $this->email_notification = $email_notification;
        return $this;
    }
    
    /**
     * Gets inherit_email_notification_configuration
     * @return string
     */
    public function getInheritEmailNotificationConfiguration()
    {
        return $this->inherit_email_notification_configuration;
    }
  
    /**
     * Sets inherit_email_notification_configuration
     * @param string $inherit_email_notification_configuration When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.
     * @return $this
     */
    public function setInheritEmailNotificationConfiguration($inherit_email_notification_configuration)
    {
        
        $this->inherit_email_notification_configuration = $inherit_email_notification_configuration;
        return $this;
    }
    
    /**
     * Gets error_details
     * @return \DocuSign\eSign\Model\ErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->error_details;
    }
  
    /**
     * Sets error_details
     * @param \DocuSign\eSign\Model\ErrorDetails $error_details 
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        
        $this->error_details = $error_details;
        return $this;
    }
    
    /**
     * Gets recipient_authentication_status
     * @return \DocuSign\eSign\Model\AuthenticationStatus
     */
    public function getRecipientAuthenticationStatus()
    {
        return $this->recipient_authentication_status;
    }
  
    /**
     * Sets recipient_authentication_status
     * @param \DocuSign\eSign\Model\AuthenticationStatus $recipient_authentication_status 
     * @return $this
     */
    public function setRecipientAuthenticationStatus($recipient_authentication_status)
    {
        
        $this->recipient_authentication_status = $recipient_authentication_status;
        return $this;
    }
    
    /**
     * Gets total_tab_count
     * @return string
     */
    public function getTotalTabCount()
    {
        return $this->total_tab_count;
    }
  
    /**
     * Sets total_tab_count
     * @param string $total_tab_count 
     * @return $this
     */
    public function setTotalTabCount($total_tab_count)
    {
        
        $this->total_tab_count = $total_tab_count;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
