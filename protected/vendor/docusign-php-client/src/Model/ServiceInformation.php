<?php
/**
 * ServiceInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * ServiceInformation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServiceInformation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'service_versions' => '\DocuSign\eSign\Model\ServiceVersion[]',
        'build_version' => 'string',
        'build_branch' => 'string',
        'build_sha' => 'string',
        'build_branch_deployed_date_time' => 'string',
        'linked_sites' => 'string[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'service_versions' => 'serviceVersions',
        'build_version' => 'buildVersion',
        'build_branch' => 'buildBranch',
        'build_sha' => 'buildSHA',
        'build_branch_deployed_date_time' => 'buildBranchDeployedDateTime',
        'linked_sites' => 'linkedSites'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'service_versions' => 'setServiceVersions',
        'build_version' => 'setBuildVersion',
        'build_branch' => 'setBuildBranch',
        'build_sha' => 'setBuildSha',
        'build_branch_deployed_date_time' => 'setBuildBranchDeployedDateTime',
        'linked_sites' => 'setLinkedSites'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'service_versions' => 'getServiceVersions',
        'build_version' => 'getBuildVersion',
        'build_branch' => 'getBuildBranch',
        'build_sha' => 'getBuildSha',
        'build_branch_deployed_date_time' => 'getBuildBranchDeployedDateTime',
        'linked_sites' => 'getLinkedSites'
    );
  
    
    /**
      * $service_versions 
      * @var \DocuSign\eSign\Model\ServiceVersion[]
      */
    protected $service_versions;
    
    /**
      * $build_version Reserved: TBD
      * @var string
      */
    protected $build_version;
    
    /**
      * $build_branch Reserved: TBD
      * @var string
      */
    protected $build_branch;
    
    /**
      * $build_sha Reserved: TBD
      * @var string
      */
    protected $build_sha;
    
    /**
      * $build_branch_deployed_date_time Reserved: TBD
      * @var string
      */
    protected $build_branch_deployed_date_time;
    
    /**
      * $linked_sites 
      * @var string[]
      */
    protected $linked_sites;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->service_versions = $data["service_versions"];
            $this->build_version = $data["build_version"];
            $this->build_branch = $data["build_branch"];
            $this->build_sha = $data["build_sha"];
            $this->build_branch_deployed_date_time = $data["build_branch_deployed_date_time"];
            $this->linked_sites = $data["linked_sites"];
        }
    }
    
    /**
     * Gets service_versions
     * @return \DocuSign\eSign\Model\ServiceVersion[]
     */
    public function getServiceVersions()
    {
        return $this->service_versions;
    }
  
    /**
     * Sets service_versions
     * @param \DocuSign\eSign\Model\ServiceVersion[] $service_versions 
     * @return $this
     */
    public function setServiceVersions($service_versions)
    {
        
        $this->service_versions = $service_versions;
        return $this;
    }
    
    /**
     * Gets build_version
     * @return string
     */
    public function getBuildVersion()
    {
        return $this->build_version;
    }
  
    /**
     * Sets build_version
     * @param string $build_version Reserved: TBD
     * @return $this
     */
    public function setBuildVersion($build_version)
    {
        
        $this->build_version = $build_version;
        return $this;
    }
    
    /**
     * Gets build_branch
     * @return string
     */
    public function getBuildBranch()
    {
        return $this->build_branch;
    }
  
    /**
     * Sets build_branch
     * @param string $build_branch Reserved: TBD
     * @return $this
     */
    public function setBuildBranch($build_branch)
    {
        
        $this->build_branch = $build_branch;
        return $this;
    }
    
    /**
     * Gets build_sha
     * @return string
     */
    public function getBuildSha()
    {
        return $this->build_sha;
    }
  
    /**
     * Sets build_sha
     * @param string $build_sha Reserved: TBD
     * @return $this
     */
    public function setBuildSha($build_sha)
    {
        
        $this->build_sha = $build_sha;
        return $this;
    }
    
    /**
     * Gets build_branch_deployed_date_time
     * @return string
     */
    public function getBuildBranchDeployedDateTime()
    {
        return $this->build_branch_deployed_date_time;
    }
  
    /**
     * Sets build_branch_deployed_date_time
     * @param string $build_branch_deployed_date_time Reserved: TBD
     * @return $this
     */
    public function setBuildBranchDeployedDateTime($build_branch_deployed_date_time)
    {
        
        $this->build_branch_deployed_date_time = $build_branch_deployed_date_time;
        return $this;
    }
    
    /**
     * Gets linked_sites
     * @return string[]
     */
    public function getLinkedSites()
    {
        return $this->linked_sites;
    }
  
    /**
     * Sets linked_sites
     * @param string[] $linked_sites 
     * @return $this
     */
    public function setLinkedSites($linked_sites)
    {
        
        $this->linked_sites = $linked_sites;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
