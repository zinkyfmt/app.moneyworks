<?php
/**
 * CustomTabsApi
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */


namespace DocuSign\eSign\Api\CustomTabsApi;

class ListOptions
{
        
    /**
      * $custom_tab_only When set to **true**, only custom tabs are returned in the response.
      * @var string
      */
    protected $custom_tab_only;

    /**
     * Gets custom_tab_only
     * @return string
     */
    public function getCustomTabOnly()
    {
        return $this->custom_tab_only;
    }
  
    /**
     * Sets custom_tab_only
     * @param string $custom_tab_only When set to **true**, only custom tabs are returned in the response.
     * @return $this
     */
    public function setCustomTabOnly($custom_tab_only)
    {
        $this->custom_tab_only = $custom_tab_only;
        return $this;
    }
    
}


namespace DocuSign\eSign\Api;

use \DocuSign\eSign\Configuration;
use \DocuSign\eSign\ApiClient;
use \DocuSign\eSign\ApiException;
use \DocuSign\eSign\ObjectSerializer;

/**
 * CustomTabsApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomTabsApi
{

    /**
     * API Client
     * @var \DocuSign\eSign\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \DocuSign\eSign\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://www.docusign.net/restapi');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \DocuSign\eSign\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \DocuSign\eSign\ApiClient $apiClient set the API client
     * @return CustomTabsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    
    /**
     * list
     *
     * Gets a list of all account tabs.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return \DocuSign\eSign\Model\TabMetadataList
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function list($account_id, CustomTabsApi\ListOptions $options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listWithHttpInfo ($account_id, $options);
        return $response; 
    }


    /**
     * listWithHttpInfo
     *
     * Gets a list of all account tabs.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param  $options Options for modifying the behavior of the function. (optional)
     * @return Array of \DocuSign\eSign\Model\TabMetadataList, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function listWithHttpInfo($account_id, CustomTabsApi\ListOptions $options = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling list');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/tab_definitions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        if ($options != null)
        {
        // query params
        
        
        if ($options->getCustomTabOnly() !== null) {
            $queryParams['custom_tab_only'] = $this->apiClient->getSerializer()->toQueryValue($options->getCustomTabOnly());
        }
        }
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TabMetadataList'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TabMetadataList', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TabMetadataList', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * create
     *
     * Creates a custom tab.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\TabMetadata $tab_metadata TBD Description (optional)
     * @return \DocuSign\eSign\Model\TabMetadata
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function create($account_id, $tab_metadata = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createWithHttpInfo ($account_id, $tab_metadata);
        return $response; 
    }


    /**
     * createWithHttpInfo
     *
     * Creates a custom tab.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param \DocuSign\eSign\Model\TabMetadata $tab_metadata TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\TabMetadata, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function createWithHttpInfo($account_id, $tab_metadata = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling create');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/tab_definitions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tab_metadata)) {
            $_tempBody = $tab_metadata;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TabMetadata'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TabMetadata', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TabMetadata', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * get
     *
     * Gets custom tab information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $custom_tab_id  (required)
     * @return \DocuSign\eSign\Model\TabMetadata
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function get($account_id, $custom_tab_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getWithHttpInfo ($account_id, $custom_tab_id);
        return $response; 
    }


    /**
     * getWithHttpInfo
     *
     * Gets custom tab information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $custom_tab_id  (required)
     * @return Array of \DocuSign\eSign\Model\TabMetadata, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function getWithHttpInfo($account_id, $custom_tab_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling get');
        }
        // verify the required parameter 'custom_tab_id' is set
        if ($custom_tab_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_tab_id when calling get');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($custom_tab_id !== null) {
            $resourcePath = str_replace(
                "{" . "customTabId" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_tab_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TabMetadata'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TabMetadata', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TabMetadata', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * update
     *
     * Updates custom tab information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $custom_tab_id  (required) *
     @param \DocuSign\eSign\Model\TabMetadata $tab_metadata TBD Description (optional)
     * @return \DocuSign\eSign\Model\TabMetadata
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function update($account_id, $custom_tab_id, $tab_metadata = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateWithHttpInfo ($account_id, $custom_tab_id, $tab_metadata);
        return $response; 
    }


    /**
     * updateWithHttpInfo
     *
     * Updates custom tab information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $custom_tab_id  (required) *
     @param \DocuSign\eSign\Model\TabMetadata $tab_metadata TBD Description (optional)
     * @return Array of \DocuSign\eSign\Model\TabMetadata, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($account_id, $custom_tab_id, $tab_metadata = null)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling update');
        }
        // verify the required parameter 'custom_tab_id' is set
        if ($custom_tab_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_tab_id when calling update');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($custom_tab_id !== null) {
            $resourcePath = str_replace(
                "{" . "customTabId" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_tab_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tab_metadata)) {
            $_tempBody = $tab_metadata;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\DocuSign\eSign\Model\TabMetadata'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocuSign\eSign\ObjectSerializer::deserialize($response, '\DocuSign\eSign\Model\TabMetadata', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\TabMetadata', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * delete
     *
     * Deletes custom tab information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $custom_tab_id  (required)
     * @return void
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function delete($account_id, $custom_tab_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteWithHttpInfo ($account_id, $custom_tab_id);
        return $response; 
    }


    /**
     * deleteWithHttpInfo
     *
     * Deletes custom tab information.
     *
     *
     @param string $account_id The external account number (int) or account ID Guid. (required) *
     @param string $custom_tab_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocuSign\eSign\ApiException on non-2xx response
     */
    public function deleteWithHttpInfo($account_id, $custom_tab_id)
    {
        
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling delete');
        }
        // verify the required parameter 'custom_tab_id' is set
        if ($custom_tab_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_tab_id when calling delete');
        }
  
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }// path params
        
        if ($custom_tab_id !== null) {
            $resourcePath = str_replace(
                "{" . "customTabId" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_tab_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \DocuSign\eSign\ObjectSerializer::deserialize($e->getResponseBody(), '\DocuSign\eSign\Model\ErrorDetails', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
