<?php
/**
 * TemplateRole
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
/**
 * TemplateRole Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DocuSign\eSign
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TemplateRole implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'email' => 'string',
        'role_name' => 'string',
        'name' => 'string',
        'signing_group_id' => 'string',
        'in_person_signer_name' => 'string',
        'client_user_id' => 'string',
        'embedded_recipient_start_url' => 'string',
        'default_recipient' => 'string',
        'access_code' => 'string',
        'routing_order' => 'string',
        'email_notification' => '\DocuSign\eSign\Model\RecipientEmailNotification',
        'tabs' => '\DocuSign\eSign\Model\Tabs'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'email' => 'email',
        'role_name' => 'roleName',
        'name' => 'name',
        'signing_group_id' => 'signingGroupId',
        'in_person_signer_name' => 'inPersonSignerName',
        'client_user_id' => 'clientUserId',
        'embedded_recipient_start_url' => 'embeddedRecipientStartURL',
        'default_recipient' => 'defaultRecipient',
        'access_code' => 'accessCode',
        'routing_order' => 'routingOrder',
        'email_notification' => 'emailNotification',
        'tabs' => 'tabs'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'email' => 'setEmail',
        'role_name' => 'setRoleName',
        'name' => 'setName',
        'signing_group_id' => 'setSigningGroupId',
        'in_person_signer_name' => 'setInPersonSignerName',
        'client_user_id' => 'setClientUserId',
        'embedded_recipient_start_url' => 'setEmbeddedRecipientStartUrl',
        'default_recipient' => 'setDefaultRecipient',
        'access_code' => 'setAccessCode',
        'routing_order' => 'setRoutingOrder',
        'email_notification' => 'setEmailNotification',
        'tabs' => 'setTabs'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'email' => 'getEmail',
        'role_name' => 'getRoleName',
        'name' => 'getName',
        'signing_group_id' => 'getSigningGroupId',
        'in_person_signer_name' => 'getInPersonSignerName',
        'client_user_id' => 'getClientUserId',
        'embedded_recipient_start_url' => 'getEmbeddedRecipientStartUrl',
        'default_recipient' => 'getDefaultRecipient',
        'access_code' => 'getAccessCode',
        'routing_order' => 'getRoutingOrder',
        'email_notification' => 'getEmailNotification',
        'tabs' => 'getTabs'
    );
  
    
    /**
      * $email Specifies the email associated with a role name.
      * @var string
      */
    protected $email;
    
    /**
      * $role_name Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
      * @var string
      */
    protected $role_name;
    
    /**
      * $name Specifies the recipient's name.
      * @var string
      */
    protected $name;
    
    /**
      * $signing_group_id When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
      * @var string
      */
    protected $signing_group_id;
    
    /**
      * $in_person_signer_name Specifies the full legal name of the signer in person signer template roles.\n\nMaximum Length: 100 characters.
      * @var string
      */
    protected $in_person_signer_name;
    
    /**
      * $client_user_id Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.ng. \n\nMaximum length: 100 characters.
      * @var string
      */
    protected $client_user_id;
    
    /**
      * $embedded_recipient_start_url Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender’s system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.\n\nIt is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient’s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
      * @var string
      */
    protected $embedded_recipient_start_url;
    
    /**
      * $default_recipient When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
      * @var string
      */
    protected $default_recipient;
    
    /**
      * $access_code If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and must conform to account’s access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then access code is not required.
      * @var string
      */
    protected $access_code;
    
    /**
      * $routing_order Specifies the routing order of the recipient in the envelope.
      * @var string
      */
    protected $routing_order;
    
    /**
      * $email_notification 
      * @var \DocuSign\eSign\Model\RecipientEmailNotification
      */
    protected $email_notification;
    
    /**
      * $tabs 
      * @var \DocuSign\eSign\Model\Tabs
      */
    protected $tabs;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->email = $data["email"];
            $this->role_name = $data["role_name"];
            $this->name = $data["name"];
            $this->signing_group_id = $data["signing_group_id"];
            $this->in_person_signer_name = $data["in_person_signer_name"];
            $this->client_user_id = $data["client_user_id"];
            $this->embedded_recipient_start_url = $data["embedded_recipient_start_url"];
            $this->default_recipient = $data["default_recipient"];
            $this->access_code = $data["access_code"];
            $this->routing_order = $data["routing_order"];
            $this->email_notification = $data["email_notification"];
            $this->tabs = $data["tabs"];
        }
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Specifies the email associated with a role name.
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets role_name
     * @return string
     */
    public function getRoleName()
    {
        return $this->role_name;
    }
  
    /**
     * Sets role_name
     * @param string $role_name Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.
     * @return $this
     */
    public function setRoleName($role_name)
    {
        
        $this->role_name = $role_name;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Specifies the recipient's name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets signing_group_id
     * @return string
     */
    public function getSigningGroupId()
    {
        return $this->signing_group_id;
    }
  
    /**
     * Sets signing_group_id
     * @param string $signing_group_id When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
     * @return $this
     */
    public function setSigningGroupId($signing_group_id)
    {
        
        $this->signing_group_id = $signing_group_id;
        return $this;
    }
    
    /**
     * Gets in_person_signer_name
     * @return string
     */
    public function getInPersonSignerName()
    {
        return $this->in_person_signer_name;
    }
  
    /**
     * Sets in_person_signer_name
     * @param string $in_person_signer_name Specifies the full legal name of the signer in person signer template roles.\n\nMaximum Length: 100 characters.
     * @return $this
     */
    public function setInPersonSignerName($in_person_signer_name)
    {
        
        $this->in_person_signer_name = $in_person_signer_name;
        return $this;
    }
    
    /**
     * Gets client_user_id
     * @return string
     */
    public function getClientUserId()
    {
        return $this->client_user_id;
    }
  
    /**
     * Sets client_user_id
     * @param string $client_user_id Specifies whether the recipient is embedded or remote. \n\nIf the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.ng. \n\nMaximum length: 100 characters.
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        
        $this->client_user_id = $client_user_id;
        return $this;
    }
    
    /**
     * Gets embedded_recipient_start_url
     * @return string
     */
    public function getEmbeddedRecipientStartUrl()
    {
        return $this->embedded_recipient_start_url;
    }
  
    /**
     * Sets embedded_recipient_start_url
     * @param string $embedded_recipient_start_url Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender’s system (the server responding to the URL) must request a recipient token to launch a signing session. \n\nIf set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.\n\nIt is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient’s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.\n\nIf the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The `customFields` property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`
     * @return $this
     */
    public function setEmbeddedRecipientStartUrl($embedded_recipient_start_url)
    {
        
        $this->embedded_recipient_start_url = $embedded_recipient_start_url;
        return $this;
    }
    
    /**
     * Gets default_recipient
     * @return string
     */
    public function getDefaultRecipient()
    {
        return $this->default_recipient;
    }
  
    /**
     * Sets default_recipient
     * @param string $default_recipient When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
     * @return $this
     */
    public function setDefaultRecipient($default_recipient)
    {
        
        $this->default_recipient = $default_recipient;
        return $this;
    }
    
    /**
     * Gets access_code
     * @return string
     */
    public function getAccessCode()
    {
        return $this->access_code;
    }
  
    /**
     * Sets access_code
     * @param string $access_code If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. \n\nMaximum Length: 50 characters and must conform to account’s access code format setting.\n\nIf blank, but the signer `accessCode` property is set in the envelope, then that value is used.\n\nIf blank and the signer `accessCode` property is not set, then access code is not required.
     * @return $this
     */
    public function setAccessCode($access_code)
    {
        
        $this->access_code = $access_code;
        return $this;
    }
    
    /**
     * Gets routing_order
     * @return string
     */
    public function getRoutingOrder()
    {
        return $this->routing_order;
    }
  
    /**
     * Sets routing_order
     * @param string $routing_order Specifies the routing order of the recipient in the envelope.
     * @return $this
     */
    public function setRoutingOrder($routing_order)
    {
        
        $this->routing_order = $routing_order;
        return $this;
    }
    
    /**
     * Gets email_notification
     * @return \DocuSign\eSign\Model\RecipientEmailNotification
     */
    public function getEmailNotification()
    {
        return $this->email_notification;
    }
  
    /**
     * Sets email_notification
     * @param \DocuSign\eSign\Model\RecipientEmailNotification $email_notification 
     * @return $this
     */
    public function setEmailNotification($email_notification)
    {
        
        $this->email_notification = $email_notification;
        return $this;
    }
    
    /**
     * Gets tabs
     * @return \DocuSign\eSign\Model\Tabs
     */
    public function getTabs()
    {
        return $this->tabs;
    }
  
    /**
     * Sets tabs
     * @param \DocuSign\eSign\Model\Tabs $tabs 
     * @return $this
     */
    public function setTabs($tabs)
    {
        
        $this->tabs = $tabs;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
